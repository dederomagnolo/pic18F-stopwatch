

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Jul 07 15:30:59 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	idataCOMRAM
    42  00104A                     __pidataCOMRAM:
    43                           	opt stack 0
    44                           
    45                           ;initializer for _minReg
    46  00104A  003B               	dw	59
    47                           
    48                           ;initializer for _segReg
    49  00104C  003B               	dw	59
    50                           
    51                           ;initializer for _texto
    52  00104E  30                 	db	48
    53  00104F  30                 	db	48
    54  001050  3A                 	db	58
    55  001051  30                 	db	48
    56  001052  30                 	db	48
    57                           
    58                           	psect	smallconst
    59  000600                     __psmallconst:
    60                           	opt stack 0
    61  000600  00                 	db	0
    62  000601                     _dpowers:
    63                           	opt stack 0
    64  000601  0001               	dw	1
    65  000603  000A               	dw	10
    66  000605  0064               	dw	100
    67  000607  03E8               	dw	1000
    68  000609  2710               	dw	10000
    69  00060B                     __end_of_dpowers:
    70                           	opt stack 0
    71  0000                     _INTCON2bits	set	4081
    72  0000                     _INTCON3bits	set	4080
    73  0000                     _INTCONbits	set	4082
    74  0000                     _LATCbits	set	3979
    75  0000                     _PORTBbits	set	3969
    76  0000                     _PORTD	set	3971
    77  0000                     _PORTE	set	3972
    78  0000                     _PORTEbits	set	3972
    79  0000                     _T0CON	set	4053
    80  0000                     _TMR0L	set	4054
    81  0000                     _TRISB	set	3987
    82  0000                     _TRISCbits	set	3988
    83  0000                     _TRISD	set	3989
    84  0000                     _TRISE	set	3990
    85  00060B                     STR_2:
    86  00060B  43                 	db	67	;'C'
    87  00060C  72                 	db	114	;'r'
    88  00060D  6F                 	db	111	;'o'
    89  00060E  6E                 	db	110	;'n'
    90  00060F  6F                 	db	111	;'o'
    91  000610  20                 	db	32
    92  000611  2D                 	db	45
    93  000612  20                 	db	32
    94  000613  50                 	db	80	;'P'
    95  000614  72                 	db	114	;'r'
    96  000615  6F                 	db	111	;'o'
    97  000616  67                 	db	103	;'g'
    98  000617  2E                 	db	46
    99  000618  00                 	db	0
   100  000619                     STR_4:
   101  000619  43                 	db	67	;'C'
   102  00061A  72                 	db	114	;'r'
   103  00061B  6F                 	db	111	;'o'
   104  00061C  6E                 	db	110	;'n'
   105  00061D  6F                 	db	111	;'o'
   106  00061E  20                 	db	32
   107  00061F  2D                 	db	45
   108  000620  20                 	db	32
   109  000621  52                 	db	82	;'R'
   110  000622  65                 	db	101	;'e'
   111  000623  67                 	db	103	;'g'
   112  000624  2E                 	db	46
   113  000625  00                 	db	0
   114  000626                     STR_1:
   115  000626  25                 	db	37
   116  000627  30                 	db	48	;'0'
   117  000628  32                 	db	50	;'2'
   118  000629  64                 	db	100	;'d'
   119  00062A  3A                 	db	58	;':'
   120  00062B  25                 	db	37
   121  00062C  30                 	db	48	;'0'
   122  00062D  32                 	db	50	;'2'
   123  00062E  64                 	db	100	;'d'
   124  00062F  00                 	db	0
   125  0000                     
   126                           ; #config settings
   127  000630  00                 	db	0	; dummy byte at the end
   128  0000                     
   129                           	psect	cinit
   130  000E8E                     __pcinit:
   131                           	opt stack 0
   132  000E8E                     start_initialization:
   133                           	opt stack 0
   134  000E8E                     __initialization:
   135                           	opt stack 0
   136                           
   137                           ; Clear objects allocated to COMRAM (16 bytes)
   138  000E8E  EE00  F037         	lfsr	0,__pbssCOMRAM
   139  000E92  0E10               	movlw	16
   140  000E94                     clear_0:
   141  000E94  6AEE               	clrf	postinc0,c
   142  000E96  06E8               	decf	wreg,f,c
   143  000E98  E1FD               	bnz	clear_0
   144                           
   145                           ; Initialize objects allocated to COMRAM (9 bytes)
   146                           ; load TBLPTR registers with __pidataCOMRAM
   147  000E9A  0E4A               	movlw	low __pidataCOMRAM
   148  000E9C  6EF6               	movwf	tblptrl,c
   149  000E9E  0E10               	movlw	high __pidataCOMRAM
   150  000EA0  6EF7               	movwf	tblptrh,c
   151  000EA2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   152  000EA4  6EF8               	movwf	tblptru,c
   153  000EA6  EE00  F047         	lfsr	0,__pdataCOMRAM
   154  000EAA  EE10 F009          	lfsr	1,9
   155  000EAE                     copy_data0:
   156  000EAE  0009               	tblrd		*+
   157  000EB0  CFF5 FFEE          	movff	tablat,postinc0
   158  000EB4  50E5               	movf	postdec1,w,c
   159  000EB6  50E1               	movf	fsr1l,w,c
   160  000EB8  E1FA               	bnz	copy_data0
   161  000EBA                     end_of_initialization:
   162                           	opt stack 0
   163  000EBA                     __end_of__initialization:
   164                           	opt stack 0
   165  000EBA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   166  000EBC  6EF8               	movwf	tblptru,c
   167  000EBE  0100               	movlb	0
   168  000EC0  EFF4  F007         	goto	_main	;jump to C main() function
   169                           tblptru	equ	0xFF8
   170                           tblptrh	equ	0xFF7
   171                           tblptrl	equ	0xFF6
   172                           tablat	equ	0xFF5
   173                           postinc0	equ	0xFEE
   174                           wreg	equ	0xFE8
   175                           postdec1	equ	0xFE5
   176                           fsr1l	equ	0xFE1
   177                           
   178                           	psect	bssCOMRAM
   179  000037                     __pbssCOMRAM:
   180                           	opt stack 0
   181  000037                     _contBlink:
   182                           	opt stack 0
   183  000037                     	ds	2
   184  000039                     _contTempo:
   185                           	opt stack 0
   186  000039                     	ds	2
   187  00003B                     _cronoProg:
   188                           	opt stack 0
   189  00003B                     	ds	2
   190  00003D                     _cronoReg:
   191                           	opt stack 0
   192  00003D                     	ds	2
   193  00003F                     _min:
   194                           	opt stack 0
   195  00003F                     	ds	2
   196  000041                     _pressRB0:
   197                           	opt stack 0
   198  000041                     	ds	2
   199  000043                     _pressRB1:
   200                           	opt stack 0
   201  000043                     	ds	2
   202  000045                     _seg:
   203                           	opt stack 0
   204  000045                     	ds	2
   205                           tblptru	equ	0xFF8
   206                           tblptrh	equ	0xFF7
   207                           tblptrl	equ	0xFF6
   208                           tablat	equ	0xFF5
   209                           postinc0	equ	0xFEE
   210                           wreg	equ	0xFE8
   211                           postdec1	equ	0xFE5
   212                           fsr1l	equ	0xFE1
   213                           
   214                           	psect	dataCOMRAM
   215  000047                     __pdataCOMRAM:
   216                           	opt stack 0
   217  000047                     _minReg:
   218                           	opt stack 0
   219  000047                     	ds	2
   220  000049                     _segReg:
   221                           	opt stack 0
   222  000049                     	ds	2
   223  00004B                     _texto:
   224                           	opt stack 0
   225  00004B                     	ds	5
   226                           tblptru	equ	0xFF8
   227                           tblptrh	equ	0xFF7
   228                           tblptrl	equ	0xFF6
   229                           tablat	equ	0xFF5
   230                           postinc0	equ	0xFEE
   231                           wreg	equ	0xFE8
   232                           postdec1	equ	0xFE5
   233                           fsr1l	equ	0xFE1
   234                           
   235                           	psect	cstackCOMRAM
   236  000001                     __pcstackCOMRAM:
   237                           	opt stack 0
   238  000001                     ??_isdigit:
   239  000001                     ??i2_DelayPORXLCD:
   240  000001                     ?___wmul:
   241                           	opt stack 0
   242  000001                     ?___lwdiv:
   243                           	opt stack 0
   244  000001                     ___wmul@multiplier:
   245                           	opt stack 0
   246  000001                     ___lwdiv@dividend:
   247                           	opt stack 0
   248  000001                     i2DelayFor18TCY@i:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x0
   252  000001                     	ds	1
   253  000002                     _isdigit$1332:
   254                           	opt stack 0
   255                           
   256                           ; 1 bytes @ 0x1
   257  000002                     	ds	1
   258  000003                     WriteDataXLCD@data:
   259                           	opt stack 0
   260  000003                     isdigit@c:
   261                           	opt stack 0
   262  000003                     i2WriteCmdXLCD@cmd:
   263                           	opt stack 0
   264  000003                     ___wmul@multiplicand:
   265                           	opt stack 0
   266  000003                     ___lwdiv@divisor:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x2
   270  000003                     	ds	1
   271  000004                     putrsXLCD@buffer:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x3
   275  000004                     	ds	1
   276  000005                     ___wmul@product:
   277                           	opt stack 0
   278  000005                     ___lwdiv@quotient:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x4
   282  000005                     	ds	1
   283  000006                     escreveLCD@primeiraLinha:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x5
   287  000006                     	ds	1
   288  000007                     ___lwdiv@counter:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0x6
   292  000007                     	ds	1
   293  000008                     ?___lwmod:
   294                           	opt stack 0
   295  000008                     escreveLCD@segundaLinha:
   296                           	opt stack 0
   297  000008                     ___lwmod@dividend:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x7
   301  000008                     	ds	2
   302  00000A                     ___lwmod@divisor:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x9
   306  00000A                     	ds	2
   307  00000C                     ___lwmod@counter:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0xB
   311  00000C                     	ds	1
   312  00000D                     ?_sprintf:
   313                           	opt stack 0
   314  00000D                     sprintf@sp:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0xC
   318  00000D                     	ds	2
   319  00000F                     sprintf@f:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0xE
   323  00000F                     	ds	6
   324  000015                     ??_sprintf:
   325                           
   326                           ; 0 bytes @ 0x14
   327  000015                     	ds	4
   328  000019                     sprintf@ap:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x18
   332  000019                     	ds	2
   333  00001B                     sprintf@prec:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x1A
   337  00001B                     	ds	1
   338  00001C                     sprintf@val:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x1B
   342  00001C                     	ds	2
   343  00001E                     sprintf@flag:
   344                           	opt stack 0
   345                           
   346                           ; 1 bytes @ 0x1D
   347  00001E                     	ds	1
   348  00001F                     sprintf@width:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x1E
   352  00001F                     	ds	2
   353  000021                     sprintf@c:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x20
   357  000021                     	ds	1
   358  000022                     ??_interrupcao:
   359                           
   360                           ; 0 bytes @ 0x21
   361  000022                     	ds	14
   362  000030                     ??_DelayPORXLCD:
   363  000030                     ??_Delay10KTCYx:
   364  000030                     ??_DelayXLCD:
   365  000030                     DelayFor18TCY@i:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x2F
   369  000030                     	ds	1
   370  000031                     Delay10KTCYx@unit:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x30
   374  000031                     	ds	1
   375  000032                     ??_SetDDRamAddr:
   376  000032                     WriteCmdXLCD@cmd:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x31
   380  000032                     	ds	3
   381  000035                     SetDDRamAddr@DDaddr:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x34
   385  000035                     	ds	1
   386  000036                     OpenXLCD@lcdtype:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x35
   390  000036                     	ds	1
   391  000037                     tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           postdec1	equ	0xFE5
   398                           fsr1l	equ	0xFE1
   399                           
   400                           ; 0 bytes @ 0x36
   401 ;;
   402 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   403 ;;
   404 ;; *************** function _main *****************
   405 ;; Defined at:
   406 ;;		line 198 in file "main.c"
   407 ;; Parameters:    Size  Location     Type
   408 ;;		None
   409 ;; Auto vars:     Size  Location     Type
   410 ;;		None
   411 ;; Return value:  Size  Location     Type
   412 ;;		None               void
   413 ;; Registers used:
   414 ;;		wreg, status,2, status,0, cstack
   415 ;; Tracked objects:
   416 ;;		On entry : 0/0
   417 ;;		On exit  : 0/0
   418 ;;		Unchanged: 0/0
   419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   420 ;;      Params:         0       0       0       0       0       0       0
   421 ;;      Locals:         0       0       0       0       0       0       0
   422 ;;      Temps:          0       0       0       0       0       0       0
   423 ;;      Totals:         0       0       0       0       0       0       0
   424 ;;Total ram usage:        0 bytes
   425 ;; Hardware stack levels required when called:   10
   426 ;; This function calls:
   427 ;;		_configPic
   428 ;;		_inicializeLCD
   429 ;; This function is called by:
   430 ;;		Startup code after reset
   431 ;; This function uses a non-reentrant model
   432 ;;
   433                           
   434                           	psect	text0
   435  000FE8                     __ptext0:
   436                           	opt stack 0
   437  000FE8                     _main:
   438                           	opt stack 21
   439                           
   440                           ;main.c: 199: configPic();
   441                           
   442                           ;incstack = 0
   443  000FE8  ECDB  F007         	call	_configPic	;wreg free
   444                           
   445                           ;main.c: 200: inicializeLCD();
   446  000FEC  EC7A  F007         	call	_inicializeLCD	;wreg free
   447                           
   448                           ;main.c: 202: PORTE = 0x00;
   449  000FF0  0E00               	movlw	0
   450  000FF2  6E84               	movwf	3972,c	;volatile
   451                           
   452                           ;main.c: 203: PORTEbits.RE0 = 1;
   453  000FF4  8084               	bsf	3972,0,c	;volatile
   454  000FF6  D7FF               	goto	l245
   455                           
   456                           ;main.c: 207: }
   457                           ;main.c: 209: return;
   458  000FF8  EF0C  F000         	goto	start
   459  000FFC                     __end_of_main:
   460                           	opt stack 0
   461                           tblptru	equ	0xFF8
   462                           tblptrh	equ	0xFF7
   463                           tblptrl	equ	0xFF6
   464                           tablat	equ	0xFF5
   465                           postinc0	equ	0xFEE
   466                           wreg	equ	0xFE8
   467                           postdec1	equ	0xFE5
   468                           fsr1l	equ	0xFE1
   469                           
   470 ;; *************** function _inicializeLCD *****************
   471 ;; Defined at:
   472 ;;		line 60 in file "main.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;		None
   475 ;; Auto vars:     Size  Location     Type
   476 ;;		None
   477 ;; Return value:  Size  Location     Type
   478 ;;		None               void
   479 ;; Registers used:
   480 ;;		wreg, status,2, status,0, cstack
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   486 ;;      Params:         0       0       0       0       0       0       0
   487 ;;      Locals:         0       0       0       0       0       0       0
   488 ;;      Temps:          0       0       0       0       0       0       0
   489 ;;      Totals:         0       0       0       0       0       0       0
   490 ;;Total ram usage:        0 bytes
   491 ;; Hardware stack levels used:    1
   492 ;; Hardware stack levels required when called:    9
   493 ;; This function calls:
   494 ;;		_BusyXLCD
   495 ;;		_DelayXLCD
   496 ;;		_OpenXLCD
   497 ;;		_WriteCmdXLCD
   498 ;; This function is called by:
   499 ;;		_main
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           	psect	text1
   504  000EF4                     __ptext1:
   505                           	opt stack 0
   506  000EF4                     _inicializeLCD:
   507                           	opt stack 21
   508                           
   509                           ;main.c: 62: DelayXLCD();
   510                           
   511                           ;incstack = 0
   512  000EF4  ECFE  F007         	call	_DelayXLCD	;wreg free
   513                           
   514                           ;main.c: 63: OpenXLCD(0b00101100 & 0b00111000);
   515  000EF8  0E28               	movlw	40
   516  000EFA  EC87  F005         	call	_OpenXLCD
   517                           
   518                           ;main.c: 64: DelayXLCD();
   519  000EFE  ECFE  F007         	call	_DelayXLCD	;wreg free
   520                           
   521                           ;main.c: 65: WriteCmdXLCD(0b00001111 & 0b00001101 & 0b00001110);
   522  000F02  0E0C               	movlw	12
   523  000F04  ECE7  F006         	call	_WriteCmdXLCD
   524                           
   525                           ;main.c: 66: DelayXLCD();
   526  000F08  ECFE  F007         	call	_DelayXLCD	;wreg free
   527                           
   528                           ;main.c: 67: while (BusyXLCD())
   529  000F0C  D000               	goto	l1302
   530  000F0E                     l1302:
   531  000F0E  EC17  F008         	call	_BusyXLCD	;wreg free
   532  000F12  0900               	iorlw	0
   533  000F14  A4D8               	btfss	status,2,c
   534  000F16  D7FB               	goto	l1302
   535                           
   536                           ;main.c: 70: }
   537                           ;main.c: 71: WriteCmdXLCD(0x01);
   538  000F18  0E01               	movlw	1
   539  000F1A  ECE7  F006         	call	_WriteCmdXLCD
   540  000F1E  0012               	return		;funcret
   541  000F20                     __end_of_inicializeLCD:
   542                           	opt stack 0
   543                           tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           postinc0	equ	0xFEE
   548                           wreg	equ	0xFE8
   549                           postdec1	equ	0xFE5
   550                           fsr1l	equ	0xFE1
   551                           status	equ	0xFD8
   552                           
   553 ;; *************** function _OpenXLCD *****************
   554 ;; Defined at:
   555 ;;		line 19 in file "plib/XLCD/openxlcd.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;  lcdtype         1    wreg     unsigned char 
   558 ;; Auto vars:     Size  Location     Type
   559 ;;  lcdtype         1   53[COMRAM] unsigned char 
   560 ;; Return value:  Size  Location     Type
   561 ;;		None               void
   562 ;; Registers used:
   563 ;;		wreg, status,2, status,0, cstack
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   569 ;;      Params:         0       0       0       0       0       0       0
   570 ;;      Locals:         1       0       0       0       0       0       0
   571 ;;      Temps:          0       0       0       0       0       0       0
   572 ;;      Totals:         1       0       0       0       0       0       0
   573 ;;Total ram usage:        1 bytes
   574 ;; Hardware stack levels used:    1
   575 ;; Hardware stack levels required when called:    8
   576 ;; This function calls:
   577 ;;		_BusyXLCD
   578 ;;		_Delay10KTCYx
   579 ;;		_DelayPORXLCD
   580 ;;		_SetDDRamAddr
   581 ;;		_WriteCmdXLCD
   582 ;; This function is called by:
   583 ;;		_inicializeLCD
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text2
   588  000B0E                     __ptext2:
   589                           	opt stack 0
   590  000B0E                     _OpenXLCD:
   591                           	opt stack 21
   592                           
   593                           ;incstack = 0
   594                           ;OpenXLCD@lcdtype stored from wreg
   595  000B0E  6E36               	movwf	OpenXLCD@lcdtype,c
   596                           
   597                           ;openxlcd.c: 31: PORTD &= 0xf0;
   598  000B10  0EF0               	movlw	240
   599  000B12  1683               	andwf	3971,f,c	;volatile
   600                           
   601                           ;openxlcd.c: 32: TRISD &= 0xF0;
   602  000B14  0EF0               	movlw	240
   603  000B16  1695               	andwf	3989,f,c	;volatile
   604                           
   605                           ;openxlcd.c: 35: TRISCbits.TRISC2 = 0;
   606  000B18  9494               	bcf	3988,2,c	;volatile
   607                           
   608                           ;openxlcd.c: 36: TRISCbits.TRISC0 = 0;
   609  000B1A  9094               	bcf	3988,0,c	;volatile
   610                           
   611                           ;openxlcd.c: 37: TRISCbits.TRISC1 = 0;
   612  000B1C  9294               	bcf	3988,1,c	;volatile
   613                           
   614                           ;openxlcd.c: 38: LATCbits.LATC2 = 0;
   615  000B1E  948B               	bcf	3979,2,c	;volatile
   616                           
   617                           ;openxlcd.c: 39: LATCbits.LATC0 = 0;
   618  000B20  908B               	bcf	3979,0,c	;volatile
   619                           
   620                           ;openxlcd.c: 40: LATCbits.LATC1 = 0;
   621  000B22  928B               	bcf	3979,1,c	;volatile
   622                           
   623                           ;openxlcd.c: 43: DelayPORXLCD();
   624  000B24  EC07  F008         	call	_DelayPORXLCD	;wreg free
   625                           
   626                           ;openxlcd.c: 45: WriteCmdXLCD(0x30);
   627  000B28  0E30               	movlw	48
   628  000B2A  ECE7  F006         	call	_WriteCmdXLCD
   629                           
   630                           ;openxlcd.c: 46: Delay10KTCYx(0x05);
   631  000B2E  0E05               	movlw	5
   632  000B30  ECE8  F007         	call	_Delay10KTCYx
   633                           
   634                           ;openxlcd.c: 48: WriteCmdXLCD(0x30);
   635  000B34  0E30               	movlw	48
   636  000B36  ECE7  F006         	call	_WriteCmdXLCD
   637                           
   638                           ;openxlcd.c: 49: Delay10KTCYx(0x01);
   639  000B3A  0E01               	movlw	1
   640  000B3C  ECE8  F007         	call	_Delay10KTCYx
   641                           
   642                           ;openxlcd.c: 52: WriteCmdXLCD(0x32);
   643  000B40  0E32               	movlw	50
   644  000B42  ECE7  F006         	call	_WriteCmdXLCD
   645                           
   646                           ;openxlcd.c: 53: while( BusyXLCD() );
   647  000B46  D000               	goto	l1124
   648  000B48                     l1124:
   649  000B48  EC17  F008         	call	_BusyXLCD	;wreg free
   650  000B4C  0900               	iorlw	0
   651  000B4E  B4D8               	btfsc	status,2,c
   652  000B50  D002               	goto	l1126
   653  000B52  D7FA               	goto	l1124
   654                           
   655                           ;openxlcd.c: 58: while(BusyXLCD());
   656  000B54  D000               	goto	l1126
   657  000B56                     l1126:
   658  000B56  EC17  F008         	call	_BusyXLCD	;wreg free
   659  000B5A  0900               	iorlw	0
   660  000B5C  A4D8               	btfss	status,2,c
   661  000B5E  D7FB               	goto	l1126
   662                           
   663                           ;openxlcd.c: 59: WriteCmdXLCD(lcdtype);
   664  000B60  5036               	movf	OpenXLCD@lcdtype,w,c
   665  000B62  ECE7  F006         	call	_WriteCmdXLCD
   666                           
   667                           ;openxlcd.c: 62: while(BusyXLCD());
   668  000B66  D000               	goto	l1130
   669  000B68                     l1130:
   670  000B68  EC17  F008         	call	_BusyXLCD	;wreg free
   671  000B6C  0900               	iorlw	0
   672  000B6E  A4D8               	btfss	status,2,c
   673  000B70  D7FB               	goto	l1130
   674                           
   675                           ;openxlcd.c: 63: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
   676  000B72  0E08               	movlw	8
   677  000B74  ECE7  F006         	call	_WriteCmdXLCD
   678                           
   679                           ;openxlcd.c: 64: while(BusyXLCD());
   680  000B78  D000               	goto	l1134
   681  000B7A                     l1134:
   682  000B7A  EC17  F008         	call	_BusyXLCD	;wreg free
   683  000B7E  0900               	iorlw	0
   684  000B80  A4D8               	btfss	status,2,c
   685  000B82  D7FB               	goto	l1134
   686                           
   687                           ;openxlcd.c: 65: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
   688  000B84  0E0F               	movlw	15
   689  000B86  ECE7  F006         	call	_WriteCmdXLCD
   690                           
   691                           ;openxlcd.c: 68: while(BusyXLCD());
   692  000B8A  D000               	goto	l1138
   693  000B8C                     l1138:
   694  000B8C  EC17  F008         	call	_BusyXLCD	;wreg free
   695  000B90  0900               	iorlw	0
   696  000B92  A4D8               	btfss	status,2,c
   697  000B94  D7FB               	goto	l1138
   698                           
   699                           ;openxlcd.c: 69: WriteCmdXLCD(0x01);
   700  000B96  0E01               	movlw	1
   701  000B98  ECE7  F006         	call	_WriteCmdXLCD
   702                           
   703                           ;openxlcd.c: 72: while(BusyXLCD());
   704  000B9C  D000               	goto	l1142
   705  000B9E                     l1142:
   706  000B9E  EC17  F008         	call	_BusyXLCD	;wreg free
   707  000BA2  0900               	iorlw	0
   708  000BA4  A4D8               	btfss	status,2,c
   709  000BA6  D7FB               	goto	l1142
   710                           
   711                           ;openxlcd.c: 73: WriteCmdXLCD(0b00000100);
   712  000BA8  0E04               	movlw	4
   713  000BAA  ECE7  F006         	call	_WriteCmdXLCD
   714                           
   715                           ;openxlcd.c: 76: while(BusyXLCD());
   716  000BAE  D000               	goto	l1146
   717  000BB0                     l1146:
   718  000BB0  EC17  F008         	call	_BusyXLCD	;wreg free
   719  000BB4  0900               	iorlw	0
   720  000BB6  A4D8               	btfss	status,2,c
   721  000BB8  D7FB               	goto	l1146
   722                           
   723                           ;openxlcd.c: 77: SetDDRamAddr(0x80);
   724  000BBA  0E80               	movlw	128
   725  000BBC  EC97  F006         	call	_SetDDRamAddr
   726  000BC0  D000               	goto	l47
   727  000BC2                     l47:
   728  000BC2  0012               	return		;funcret
   729  000BC4                     __end_of_OpenXLCD:
   730                           	opt stack 0
   731                           tblptru	equ	0xFF8
   732                           tblptrh	equ	0xFF7
   733                           tblptrl	equ	0xFF6
   734                           tablat	equ	0xFF5
   735                           postinc0	equ	0xFEE
   736                           wreg	equ	0xFE8
   737                           postdec1	equ	0xFE5
   738                           fsr1l	equ	0xFE1
   739                           status	equ	0xFD8
   740                           
   741 ;; *************** function _WriteCmdXLCD *****************
   742 ;; Defined at:
   743 ;;		line 13 in file "plib/XLCD/wcmdxlcd.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  cmd             1    wreg     unsigned char 
   746 ;; Auto vars:     Size  Location     Type
   747 ;;  cmd             1   49[COMRAM] unsigned char 
   748 ;; Return value:  Size  Location     Type
   749 ;;		None               void
   750 ;; Registers used:
   751 ;;		wreg, status,2, status,0, cstack
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   757 ;;      Params:         0       0       0       0       0       0       0
   758 ;;      Locals:         1       0       0       0       0       0       0
   759 ;;      Temps:          0       0       0       0       0       0       0
   760 ;;      Totals:         1       0       0       0       0       0       0
   761 ;;Total ram usage:        1 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; Hardware stack levels required when called:    7
   764 ;; This function calls:
   765 ;;		_DelayFor18TCY
   766 ;; This function is called by:
   767 ;;		_OpenXLCD
   768 ;;		_inicializeLCD
   769 ;; This function uses a non-reentrant model
   770 ;;
   771                           
   772                           	psect	text3
   773  000DCE                     __ptext3:
   774                           	opt stack 0
   775  000DCE                     _WriteCmdXLCD:
   776                           	opt stack 22
   777                           
   778                           ;incstack = 0
   779                           ;WriteCmdXLCD@cmd stored from wreg
   780  000DCE  6E32               	movwf	WriteCmdXLCD@cmd,c
   781                           
   782                           ;wcmdxlcd.c: 32: TRISD &= 0xf0;
   783  000DD0  0EF0               	movlw	240
   784  000DD2  1695               	andwf	3989,f,c	;volatile
   785                           
   786                           ;wcmdxlcd.c: 33: PORTD &= 0xf0;
   787  000DD4  0EF0               	movlw	240
   788  000DD6  1683               	andwf	3971,f,c	;volatile
   789                           
   790                           ;wcmdxlcd.c: 34: PORTD |= (unsigned)((cmd>>4)&0x0f);
   791  000DD8  3832               	swapf	WriteCmdXLCD@cmd,w,c
   792  000DDA  0B0F               	andlw	15
   793  000DDC  0B0F               	andlw	15
   794  000DDE  1283               	iorwf	3971,f,c	;volatile
   795                           
   796                           ;wcmdxlcd.c: 36: LATCbits.LATC2 = 0;
   797  000DE0  948B               	bcf	3979,2,c	;volatile
   798                           
   799                           ;wcmdxlcd.c: 37: LATCbits.LATC0 = 0;
   800  000DE2  908B               	bcf	3979,0,c	;volatile
   801                           
   802                           ;wcmdxlcd.c: 38: DelayFor18TCY();
   803  000DE4  ECA4  F007         	call	_DelayFor18TCY	;wreg free
   804                           
   805                           ;wcmdxlcd.c: 39: LATCbits.LATC1 = 1;
   806  000DE8  828B               	bsf	3979,1,c	;volatile
   807                           
   808                           ;wcmdxlcd.c: 40: DelayFor18TCY();
   809  000DEA  ECA4  F007         	call	_DelayFor18TCY	;wreg free
   810                           
   811                           ;wcmdxlcd.c: 41: LATCbits.LATC1 = 0;
   812  000DEE  928B               	bcf	3979,1,c	;volatile
   813                           
   814                           ;wcmdxlcd.c: 46: PORTD &= 0xf0;
   815  000DF0  0EF0               	movlw	240
   816  000DF2  1683               	andwf	3971,f,c	;volatile
   817                           
   818                           ;wcmdxlcd.c: 47: PORTD |= (unsigned)(cmd&0x0f);
   819  000DF4  5032               	movf	WriteCmdXLCD@cmd,w,c
   820  000DF6  0B0F               	andlw	15
   821  000DF8  1283               	iorwf	3971,f,c	;volatile
   822                           
   823                           ;wcmdxlcd.c: 49: DelayFor18TCY();
   824  000DFA  ECA4  F007         	call	_DelayFor18TCY	;wreg free
   825                           
   826                           ;wcmdxlcd.c: 50: LATCbits.LATC1 = 1;
   827  000DFE  828B               	bsf	3979,1,c	;volatile
   828                           
   829                           ;wcmdxlcd.c: 51: DelayFor18TCY();
   830  000E00  ECA4  F007         	call	_DelayFor18TCY	;wreg free
   831                           
   832                           ;wcmdxlcd.c: 52: LATCbits.LATC1 = 0;
   833  000E04  928B               	bcf	3979,1,c	;volatile
   834                           
   835                           ;wcmdxlcd.c: 56: TRISD |= 0x0f;
   836  000E06  0E0F               	movlw	15
   837  000E08  1295               	iorwf	3989,f,c	;volatile
   838  000E0A  D000               	goto	l124
   839  000E0C                     l124:
   840  000E0C  0012               	return		;funcret
   841  000E0E                     __end_of_WriteCmdXLCD:
   842                           	opt stack 0
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1l	equ	0xFE1
   851                           status	equ	0xFD8
   852                           
   853 ;; *************** function _SetDDRamAddr *****************
   854 ;; Defined at:
   855 ;;		line 13 in file "plib/XLCD/setddram.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;  DDaddr          1    wreg     unsigned char 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  DDaddr          1   52[COMRAM] unsigned char 
   860 ;; Return value:  Size  Location     Type
   861 ;;		None               void
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   869 ;;      Params:         0       0       0       0       0       0       0
   870 ;;      Locals:         1       0       0       0       0       0       0
   871 ;;      Temps:          3       0       0       0       0       0       0
   872 ;;      Totals:         4       0       0       0       0       0       0
   873 ;;Total ram usage:        4 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; Hardware stack levels required when called:    7
   876 ;; This function calls:
   877 ;;		_DelayFor18TCY
   878 ;; This function is called by:
   879 ;;		_OpenXLCD
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text4
   884  000D2E                     __ptext4:
   885                           	opt stack 0
   886  000D2E                     _SetDDRamAddr:
   887                           	opt stack 21
   888                           
   889                           ;incstack = 0
   890                           ;SetDDRamAddr@DDaddr stored from wreg
   891  000D2E  6E35               	movwf	SetDDRamAddr@DDaddr,c
   892                           
   893                           ;setddram.c: 32: TRISD &= 0xf0;
   894  000D30  0EF0               	movlw	240
   895  000D32  1695               	andwf	3989,f,c	;volatile
   896                           
   897                           ;setddram.c: 33: PORTD &= 0xf0;
   898  000D34  0EF0               	movlw	240
   899  000D36  1683               	andwf	3971,f,c	;volatile
   900                           
   901                           ;setddram.c: 34: PORTD |= (unsigned)(((DDaddr | 0b10000000)>>4) & 0x0f);
   902  000D38  5035               	movf	SetDDRamAddr@DDaddr,w,c
   903  000D3A  6E32               	movwf	??_SetDDRamAddr& (0+255),c
   904  000D3C  6A33               	clrf	(??_SetDDRamAddr+1)& (0+255),c
   905  000D3E  8E32               	bsf	??_SetDDRamAddr,7,c
   906  000D40  0E04               	movlw	4
   907  000D42  6E34               	movwf	(??_SetDDRamAddr+2)& (0+255),c
   908  000D44                     u55:
   909  000D44  3433               	rlcf	??_SetDDRamAddr+1,w,c
   910  000D46  3233               	rrcf	??_SetDDRamAddr+1,f,c
   911  000D48  3232               	rrcf	??_SetDDRamAddr,f,c
   912  000D4A  2E34               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
   913  000D4C  D7FB               	goto	u55
   914  000D4E  5032               	movf	??_SetDDRamAddr,w,c
   915  000D50  0B0F               	andlw	15
   916  000D52  1283               	iorwf	3971,f,c	;volatile
   917                           
   918                           ;setddram.c: 36: LATCbits.LATC2 = 0;
   919  000D54  948B               	bcf	3979,2,c	;volatile
   920                           
   921                           ;setddram.c: 37: LATCbits.LATC0 = 0;
   922  000D56  908B               	bcf	3979,0,c	;volatile
   923                           
   924                           ;setddram.c: 38: DelayFor18TCY();
   925  000D58  ECA4  F007         	call	_DelayFor18TCY	;wreg free
   926                           
   927                           ;setddram.c: 39: LATCbits.LATC1 = 1;
   928  000D5C  828B               	bsf	3979,1,c	;volatile
   929                           
   930                           ;setddram.c: 40: DelayFor18TCY();
   931  000D5E  ECA4  F007         	call	_DelayFor18TCY	;wreg free
   932                           
   933                           ;setddram.c: 41: LATCbits.LATC1 = 0;
   934  000D62  928B               	bcf	3979,1,c	;volatile
   935                           
   936                           ;setddram.c: 46: PORTD &= 0xf0;
   937  000D64  0EF0               	movlw	240
   938  000D66  1683               	andwf	3971,f,c	;volatile
   939                           
   940                           ;setddram.c: 47: PORTD |= (unsigned)((DDaddr&0x0f));
   941  000D68  5035               	movf	SetDDRamAddr@DDaddr,w,c
   942  000D6A  0B0F               	andlw	15
   943  000D6C  1283               	iorwf	3971,f,c	;volatile
   944                           
   945                           ;setddram.c: 49: DelayFor18TCY();
   946  000D6E  ECA4  F007         	call	_DelayFor18TCY	;wreg free
   947                           
   948                           ;setddram.c: 50: LATCbits.LATC1 = 1;
   949  000D72  828B               	bsf	3979,1,c	;volatile
   950                           
   951                           ;setddram.c: 51: DelayFor18TCY();
   952  000D74  ECA4  F007         	call	_DelayFor18TCY	;wreg free
   953                           
   954                           ;setddram.c: 52: LATCbits.LATC1 = 0;
   955  000D78  928B               	bcf	3979,1,c	;volatile
   956                           
   957                           ;setddram.c: 56: TRISD |= 0x0f;
   958  000D7A  0E0F               	movlw	15
   959  000D7C  1295               	iorwf	3989,f,c	;volatile
   960  000D7E  D000               	goto	l113
   961  000D80                     l113:
   962  000D80  0012               	return		;funcret
   963  000D82                     __end_of_SetDDRamAddr:
   964                           	opt stack 0
   965                           tblptru	equ	0xFF8
   966                           tblptrh	equ	0xFF7
   967                           tblptrl	equ	0xFF6
   968                           tablat	equ	0xFF5
   969                           postinc0	equ	0xFEE
   970                           wreg	equ	0xFE8
   971                           postdec1	equ	0xFE5
   972                           fsr1l	equ	0xFE1
   973                           status	equ	0xFD8
   974                           
   975 ;; *************** function _DelayFor18TCY *****************
   976 ;; Defined at:
   977 ;;		line 44 in file "main.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;		None
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  i               2   47[COMRAM] int 
   982 ;; Return value:  Size  Location     Type
   983 ;;		None               void
   984 ;; Registers used:
   985 ;;		wreg, status,2, status,0
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   991 ;;      Params:         0       0       0       0       0       0       0
   992 ;;      Locals:         2       0       0       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0       0       0
   994 ;;      Totals:         2       0       0       0       0       0       0
   995 ;;Total ram usage:        2 bytes
   996 ;; Hardware stack levels used:    1
   997 ;; Hardware stack levels required when called:    6
   998 ;; This function calls:
   999 ;;		Nothing
  1000 ;; This function is called by:
  1001 ;;		_SetDDRamAddr
  1002 ;;		_WriteCmdXLCD
  1003 ;;		_ReadAddrXLCD
  1004 ;;		_ReadDataXLCD
  1005 ;;		_SetCGRamAddr
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           	psect	text5
  1010  000F48                     __ptext5:
  1011                           	opt stack 0
  1012  000F48                     _DelayFor18TCY:
  1013                           	opt stack 22
  1014                           
  1015                           ;main.c: 45: for (int i = 0; i < 18; i++)
  1016                           
  1017                           ;incstack = 0
  1018  000F48  0E00               	movlw	0
  1019  000F4A  6E31               	movwf	DelayFor18TCY@i+1,c
  1020  000F4C  0E00               	movlw	0
  1021  000F4E  6E30               	movwf	DelayFor18TCY@i,c
  1022  000F50                     l936:
  1023  000F50  BE31               	btfsc	DelayFor18TCY@i+1,7,c
  1024  000F52  D008               	goto	l940
  1025  000F54  5031               	movf	DelayFor18TCY@i+1,w,c
  1026  000F56  E10A               	bnz	l199
  1027  000F58  0E12               	movlw	18
  1028  000F5A  5C30               	subwf	DelayFor18TCY@i,w,c
  1029  000F5C  B0D8               	btfsc	status,0,c
  1030  000F5E  D006               	goto	l199
  1031  000F60  D001               	goto	l940
  1032  000F62  D004               	goto	l199
  1033  000F64                     l940:
  1034  000F64  4A30               	infsnz	DelayFor18TCY@i,f,c
  1035  000F66  2A31               	incf	DelayFor18TCY@i+1,f,c
  1036  000F68  D7F3               	goto	l936
  1037  000F6A  D000               	goto	l199
  1038  000F6C                     l199:
  1039  000F6C  0012               	return		;funcret
  1040  000F6E                     __end_of_DelayFor18TCY:
  1041                           	opt stack 0
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1l	equ	0xFE1
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _DelayPORXLCD *****************
  1053 ;; Defined at:
  1054 ;;		line 52 in file "main.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;		None               void
  1061 ;; Registers used:
  1062 ;;		wreg
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1068 ;;      Params:         0       0       0       0       0       0       0
  1069 ;;      Locals:         0       0       0       0       0       0       0
  1070 ;;      Temps:          1       0       0       0       0       0       0
  1071 ;;      Totals:         1       0       0       0       0       0       0
  1072 ;;Total ram usage:        1 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    6
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_OpenXLCD
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text6
  1083  00100E                     __ptext6:
  1084                           	opt stack 0
  1085  00100E                     _DelayPORXLCD:
  1086                           	opt stack 22
  1087                           
  1088                           ;main.c: 53: _delay((unsigned long)((15)*(20000000/4000.0)));
  1089                           
  1090                           ;incstack = 0
  1091  00100E  0E62               	movlw	98
  1092  001010  6E30               	movwf	??_DelayPORXLCD& (0+255),c
  1093  001012  0E66               	movlw	102
  1094  001014                     u1117:
  1095  001014  2EE8               	decfsz	wreg,f,c
  1096  001016  D7FE               	goto	u1117
  1097  001018  2E30               	decfsz	??_DelayPORXLCD& (0+255),f,c
  1098  00101A  D7FC               	goto	u1117
  1099  00101C  0012               	return		;funcret
  1100  00101E                     __end_of_DelayPORXLCD:
  1101                           	opt stack 0
  1102                           tblptru	equ	0xFF8
  1103                           tblptrh	equ	0xFF7
  1104                           tblptrl	equ	0xFF6
  1105                           tablat	equ	0xFF5
  1106                           postinc0	equ	0xFEE
  1107                           wreg	equ	0xFE8
  1108                           postdec1	equ	0xFE5
  1109                           fsr1l	equ	0xFE1
  1110                           status	equ	0xFD8
  1111                           
  1112 ;; *************** function _Delay10KTCYx *****************
  1113 ;; Defined at:
  1114 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10ktcyx.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;  unit            1    wreg     unsigned char 
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  unit            1   48[COMRAM] unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;		None               void
  1121 ;; Registers used:
  1122 ;;		wreg
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1128 ;;      Params:         0       0       0       0       0       0       0
  1129 ;;      Locals:         1       0       0       0       0       0       0
  1130 ;;      Temps:          1       0       0       0       0       0       0
  1131 ;;      Totals:         2       0       0       0       0       0       0
  1132 ;;Total ram usage:        2 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; Hardware stack levels required when called:    6
  1135 ;; This function calls:
  1136 ;;		Nothing
  1137 ;; This function is called by:
  1138 ;;		_OpenXLCD
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text7
  1143  000FD0                     __ptext7:
  1144                           	opt stack 0
  1145  000FD0                     _Delay10KTCYx:
  1146                           	opt stack 22
  1147                           
  1148                           ;incstack = 0
  1149                           ;Delay10KTCYx@unit stored from wreg
  1150  000FD0  6E31               	movwf	Delay10KTCYx@unit,c
  1151  000FD2  0E0D               	movlw	13
  1152  000FD4  6E30               	movwf	??_Delay10KTCYx& (0+255),c
  1153  000FD6  0EFC               	movlw	252
  1154  000FD8                     u1127:
  1155  000FD8  2EE8               	decfsz	wreg,f,c
  1156  000FDA  D7FE               	goto	u1127
  1157  000FDC  2E30               	decfsz	??_Delay10KTCYx& (0+255),f,c
  1158  000FDE  D7FC               	goto	u1127
  1159  000FE0  2E31               	decfsz	Delay10KTCYx@unit,f,c
  1160  000FE2  D7F7               	goto	l978
  1161  000FE4  D000               	goto	l526
  1162  000FE6                     l526:
  1163  000FE6  0012               	return		;funcret
  1164  000FE8                     __end_of_Delay10KTCYx:
  1165                           	opt stack 0
  1166                           tblptru	equ	0xFF8
  1167                           tblptrh	equ	0xFF7
  1168                           tblptrl	equ	0xFF6
  1169                           tablat	equ	0xFF5
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           postdec1	equ	0xFE5
  1173                           fsr1l	equ	0xFE1
  1174                           status	equ	0xFD8
  1175                           
  1176 ;; *************** function _BusyXLCD *****************
  1177 ;; Defined at:
  1178 ;;		line 12 in file "plib/XLCD/busyxlcd.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;		None
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;		None
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      unsigned char 
  1185 ;; Registers used:
  1186 ;;		wreg
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1192 ;;      Params:         0       0       0       0       0       0       0
  1193 ;;      Locals:         0       0       0       0       0       0       0
  1194 ;;      Temps:          0       0       0       0       0       0       0
  1195 ;;      Totals:         0       0       0       0       0       0       0
  1196 ;;Total ram usage:        0 bytes
  1197 ;; Hardware stack levels used:    1
  1198 ;; Hardware stack levels required when called:    6
  1199 ;; This function calls:
  1200 ;;		Nothing
  1201 ;; This function is called by:
  1202 ;;		_OpenXLCD
  1203 ;;		_inicializeLCD
  1204 ;;		_putsXLCD
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           	psect	text8
  1209  00102E                     __ptext8:
  1210                           	opt stack 0
  1211  00102E                     _BusyXLCD:
  1212                           	opt stack 22
  1213                           
  1214                           ;busyxlcd.c: 15: _delay((unsigned long)((10)*(20000000/4000000.0)));
  1215                           
  1216                           ;incstack = 0
  1217  00102E  0E10               	movlw	16
  1218  001030                     u1137:
  1219  001030  2EE8               	decfsz	wreg,f,c
  1220  001032  D7FE               	goto	u1137
  1221  001034  D000               	nop2		;nop
  1222                           
  1223                           ;busyxlcd.c: 16: return 0;
  1224  001036  0E00               	movlw	0
  1225  001038  D000               	goto	l5
  1226  00103A                     l5:
  1227  00103A  0012               	return		;funcret
  1228  00103C                     __end_of_BusyXLCD:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           fsr1l	equ	0xFE1
  1238                           status	equ	0xFD8
  1239                           
  1240 ;; *************** function _DelayXLCD *****************
  1241 ;; Defined at:
  1242 ;;		line 56 in file "main.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;		None               void
  1249 ;; Registers used:
  1250 ;;		wreg
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1256 ;;      Params:         0       0       0       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0
  1258 ;;      Temps:          1       0       0       0       0       0       0
  1259 ;;      Totals:         1       0       0       0       0       0       0
  1260 ;;Total ram usage:        1 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    6
  1263 ;; This function calls:
  1264 ;;		Nothing
  1265 ;; This function is called by:
  1266 ;;		_inicializeLCD
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text9
  1271  000FFC                     __ptext9:
  1272                           	opt stack 0
  1273  000FFC                     _DelayXLCD:
  1274                           	opt stack 23
  1275                           
  1276                           ;main.c: 57: _delay((unsigned long)((5)*(20000000/4000.0)));
  1277                           
  1278                           ;incstack = 0
  1279  000FFC  0E21               	movlw	33
  1280  000FFE  6E30               	movwf	??_DelayXLCD& (0+255),c
  1281  001000  0E76               	movlw	118
  1282  001002                     u1147:
  1283  001002  2EE8               	decfsz	wreg,f,c
  1284  001004  D7FE               	goto	u1147
  1285  001006  2E30               	decfsz	??_DelayXLCD& (0+255),f,c
  1286  001008  D7FC               	goto	u1147
  1287  00100A  D000               	nop2	
  1288  00100C  0012               	return		;funcret
  1289  00100E                     __end_of_DelayXLCD:
  1290                           	opt stack 0
  1291                           tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           postdec1	equ	0xFE5
  1298                           fsr1l	equ	0xFE1
  1299                           status	equ	0xFD8
  1300                           
  1301 ;; *************** function _configPic *****************
  1302 ;; Defined at:
  1303 ;;		line 28 in file "main.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;		None
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;		None
  1308 ;; Return value:  Size  Location     Type
  1309 ;;		None               void
  1310 ;; Registers used:
  1311 ;;		wreg, status,2
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1317 ;;      Params:         0       0       0       0       0       0       0
  1318 ;;      Locals:         0       0       0       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0
  1320 ;;      Totals:         0       0       0       0       0       0       0
  1321 ;;Total ram usage:        0 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    6
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_main
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text10
  1332  000FB6                     __ptext10:
  1333                           	opt stack 0
  1334  000FB6                     _configPic:
  1335                           	opt stack 24
  1336                           
  1337                           ;main.c: 30: TRISE = 0x00;
  1338                           
  1339                           ;incstack = 0
  1340  000FB6  0E00               	movlw	0
  1341  000FB8  6E96               	movwf	3990,c	;volatile
  1342                           
  1343                           ;main.c: 31: TRISB = 0xFF;
  1344  000FBA  6893               	setf	3987,c	;volatile
  1345                           
  1346                           ;main.c: 33: INTCON2bits.RBPU = 0;
  1347  000FBC  9EF1               	bcf	intcon2,7,c	;volatile
  1348                           
  1349                           ;main.c: 35: INTCONbits.GIE = 1;
  1350  000FBE  8EF2               	bsf	intcon,7,c	;volatile
  1351                           
  1352                           ;main.c: 36: INTCONbits.INT0IE = 1;
  1353  000FC0  88F2               	bsf	intcon,4,c	;volatile
  1354                           
  1355                           ;main.c: 37: INTCON3bits.INT1IE = 1;
  1356  000FC2  86F0               	bsf	intcon3,3,c	;volatile
  1357                           
  1358                           ;main.c: 38: INTCONbits.TMR0IE = 1;
  1359  000FC4  8AF2               	bsf	intcon,5,c	;volatile
  1360                           
  1361                           ;main.c: 39: T0CON = 0b11000111;
  1362  000FC6  0EC7               	movlw	199
  1363  000FC8  6ED5               	movwf	4053,c	;volatile
  1364                           
  1365                           ;main.c: 41: TMR0L = 0;
  1366  000FCA  0E00               	movlw	0
  1367  000FCC  6ED6               	movwf	4054,c	;volatile
  1368  000FCE  0012               	return		;funcret
  1369  000FD0                     __end_of_configPic:
  1370                           	opt stack 0
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           intcon	equ	0xFF2
  1376                           intcon2	equ	0xFF1
  1377                           intcon3	equ	0xFF0
  1378                           postinc0	equ	0xFEE
  1379                           wreg	equ	0xFE8
  1380                           postdec1	equ	0xFE5
  1381                           fsr1l	equ	0xFE1
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function _interrupcao *****************
  1385 ;; Defined at:
  1386 ;;		line 108 in file "main.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;		None
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;		None
  1391 ;; Return value:  Size  Location     Type
  1392 ;;		None               void
  1393 ;; Registers used:
  1394 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1400 ;;      Params:         0       0       0       0       0       0       0
  1401 ;;      Locals:         0       0       0       0       0       0       0
  1402 ;;      Temps:         14       0       0       0       0       0       0
  1403 ;;      Totals:        14       0       0       0       0       0       0
  1404 ;;Total ram usage:       14 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    5
  1407 ;; This function calls:
  1408 ;;		_cronoProgressivo
  1409 ;;		_cronoRegressivo
  1410 ;;		_escreveLCD
  1411 ;;		_sprintf
  1412 ;; This function is called by:
  1413 ;;		Interrupt level 2
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	intcode
  1418  000008                     __pintcode:
  1419                           	opt stack 0
  1420  000008                     _interrupcao:
  1421                           	opt stack 21
  1422                           
  1423                           ;incstack = 0
  1424  000008  CFFA F022          	movff	pclath,??_interrupcao
  1425  00000C  CFFB F023          	movff	pclatu,??_interrupcao+1
  1426  000010  CFE9 F024          	movff	fsr0l,??_interrupcao+2
  1427  000014  ED81  F004         	call	int_func,f	;refresh shadow registers
  1428                           pclatu	equ	0xFFB
  1429                           pclath	equ	0xFFA
  1430                           tblptru	equ	0xFF8
  1431                           tblptrh	equ	0xFF7
  1432                           tblptrl	equ	0xFF6
  1433                           tablat	equ	0xFF5
  1434                           intcon	equ	0xFF2
  1435                           intcon2	equ	0xFF1
  1436                           intcon3	equ	0xFF0
  1437                           postinc0	equ	0xFEE
  1438                           fsr0l	equ	0xFE9
  1439                           wreg	equ	0xFE8
  1440                           postdec1	equ	0xFE5
  1441                           fsr1l	equ	0xFE1
  1442                           status	equ	0xFD8
  1443                           
  1444                           	psect	intcode_body
  1445  000902                     __pintcode_body:
  1446                           	opt stack 21
  1447  000902                     int_func:
  1448                           	opt stack 21
  1449  000902  0006               	pop		; remove dummy address from shadow register refresh
  1450  000904  CFEA F025          	movff	fsr0h,??_interrupcao+3
  1451  000908  CFE1 F026          	movff	fsr1l,??_interrupcao+4
  1452  00090C  CFE2 F027          	movff	fsr1h,??_interrupcao+5
  1453  000910  CFD9 F028          	movff	fsr2l,??_interrupcao+6
  1454  000914  CFDA F029          	movff	fsr2h,??_interrupcao+7
  1455  000918  CFF3 F02A          	movff	prodl,??_interrupcao+8
  1456  00091C  CFF4 F02B          	movff	prodh,??_interrupcao+9
  1457  000920  CFF6 F02C          	movff	tblptrl,??_interrupcao+10
  1458  000924  CFF7 F02D          	movff	tblptrh,??_interrupcao+11
  1459  000928  CFF8 F02E          	movff	tblptru,??_interrupcao+12
  1460  00092C  CFF5 F02F          	movff	tablat,??_interrupcao+13
  1461                           
  1462                           ;main.c: 110: if (INTCONbits.INT0IF)
  1463  000930  A2F2               	btfss	intcon,1,c	;volatile
  1464  000932  D022               	goto	i2l225
  1465                           
  1466                           ;main.c: 111: {
  1467                           ;main.c: 112: INTCONbits.INT0IF = 0;
  1468  000934  92F2               	bcf	intcon,1,c	;volatile
  1469                           
  1470                           ;main.c: 114: if (pressRB0 == 0)
  1471  000936  5041               	movf	_pressRB0,w,c
  1472  000938  1042               	iorwf	_pressRB0+1,w,c
  1473  00093A  A4D8               	btfss	status,2,c
  1474  00093C  D013               	goto	i2l226
  1475                           
  1476                           ;main.c: 115: {
  1477                           ;main.c: 116: escreveLCD("Crono - Prog.", texto);
  1478  00093E  0E0B               	movlw	low STR_2
  1479  000940  6E06               	movwf	escreveLCD@primeiraLinha,c
  1480  000942  0E06               	movlw	high STR_2
  1481  000944  6E07               	movwf	escreveLCD@primeiraLinha+1,c
  1482  000946  0E4B               	movlw	low _texto
  1483  000948  6E08               	movwf	escreveLCD@segundaLinha,c
  1484  00094A  0E00               	movlw	high _texto
  1485  00094C  6E09               	movwf	escreveLCD@segundaLinha+1,c
  1486  00094E  EC62  F007         	call	_escreveLCD	;wreg free
  1487                           
  1488                           ;main.c: 117: PORTEbits.RE0 = 1;
  1489  000952  8084               	bsf	3972,0,c	;volatile
  1490                           
  1491                           ;main.c: 118: cronoProg = 1;
  1492  000954  0E00               	movlw	0
  1493  000956  6E3C               	movwf	_cronoProg+1,c
  1494  000958  0E01               	movlw	1
  1495  00095A  6E3B               	movwf	_cronoProg,c
  1496                           
  1497                           ;main.c: 119: pressRB0 = 1;
  1498  00095C  0E00               	movlw	0
  1499  00095E  6E42               	movwf	_pressRB0+1,c
  1500  000960  0E01               	movlw	1
  1501  000962  D008               	goto	L1
  1502  000964                     i2l226:
  1503                           
  1504                           ;main.c: 121: else
  1505                           ;main.c: 122: {
  1506                           ;main.c: 123: PORTEbits.RE0 = 0;
  1507  000964  9084               	bcf	3972,0,c	;volatile
  1508                           
  1509                           ;main.c: 124: cronoProg = 0;
  1510  000966  0E00               	movlw	0
  1511  000968  6E3C               	movwf	_cronoProg+1,c
  1512  00096A  0E00               	movlw	0
  1513  00096C  6E3B               	movwf	_cronoProg,c
  1514                           
  1515                           ;main.c: 125: pressRB0 = 0;
  1516  00096E  0E00               	movlw	0
  1517  000970  6E42               	movwf	_pressRB0+1,c
  1518  000972  0E00               	movlw	0
  1519  000974                     L1:
  1520  000974  6E41               	movwf	_pressRB0,c
  1521                           
  1522                           ;main.c: 126: }
  1523                           ;main.c: 127: }
  1524  000976  D0AE               	goto	i2l241
  1525  000978                     i2l225:
  1526                           
  1527                           ;main.c: 128: else if (INTCON3bits.INT1IF)
  1528  000978  A0F0               	btfss	intcon3,0,c	;volatile
  1529  00097A  D022               	goto	i2l229
  1530                           
  1531                           ;main.c: 129: {
  1532                           ;main.c: 130: INTCON3bits.INT1IF = 0;
  1533  00097C  90F0               	bcf	intcon3,0,c	;volatile
  1534                           
  1535                           ;main.c: 132: if (pressRB1 == 0)
  1536  00097E  5043               	movf	_pressRB1,w,c
  1537  000980  1044               	iorwf	_pressRB1+1,w,c
  1538  000982  A4D8               	btfss	status,2,c
  1539  000984  D013               	goto	i2l230
  1540                           
  1541                           ;main.c: 133: {
  1542                           ;main.c: 134: escreveLCD("Crono - Reg.", texto);
  1543  000986  0E19               	movlw	low STR_4
  1544  000988  6E06               	movwf	escreveLCD@primeiraLinha,c
  1545  00098A  0E06               	movlw	high STR_4
  1546  00098C  6E07               	movwf	escreveLCD@primeiraLinha+1,c
  1547  00098E  0E4B               	movlw	low _texto
  1548  000990  6E08               	movwf	escreveLCD@segundaLinha,c
  1549  000992  0E00               	movlw	high _texto
  1550  000994  6E09               	movwf	escreveLCD@segundaLinha+1,c
  1551  000996  EC62  F007         	call	_escreveLCD	;wreg free
  1552                           
  1553                           ;main.c: 135: PORTEbits.RE1 = 1;
  1554  00099A  8284               	bsf	3972,1,c	;volatile
  1555                           
  1556                           ;main.c: 136: cronoReg = 1;
  1557  00099C  0E00               	movlw	0
  1558  00099E  6E3E               	movwf	_cronoReg+1,c
  1559  0009A0  0E01               	movlw	1
  1560  0009A2  6E3D               	movwf	_cronoReg,c
  1561                           
  1562                           ;main.c: 137: pressRB1 = 1;
  1563  0009A4  0E00               	movlw	0
  1564  0009A6  6E44               	movwf	_pressRB1+1,c
  1565  0009A8  0E01               	movlw	1
  1566  0009AA  D008               	goto	L2
  1567  0009AC                     i2l230:
  1568                           
  1569                           ;main.c: 139: else
  1570                           ;main.c: 140: {
  1571                           ;main.c: 141: PORTEbits.RE1 = 0;
  1572  0009AC  9284               	bcf	3972,1,c	;volatile
  1573                           
  1574                           ;main.c: 142: cronoReg = 0;
  1575  0009AE  0E00               	movlw	0
  1576  0009B0  6E3E               	movwf	_cronoReg+1,c
  1577  0009B2  0E00               	movlw	0
  1578  0009B4  6E3D               	movwf	_cronoReg,c
  1579                           
  1580                           ;main.c: 143: pressRB1 = 0;
  1581  0009B6  0E00               	movlw	0
  1582  0009B8  6E44               	movwf	_pressRB1+1,c
  1583  0009BA  0E00               	movlw	0
  1584  0009BC                     L2:
  1585  0009BC  6E43               	movwf	_pressRB1,c
  1586                           
  1587                           ;main.c: 144: }
  1588                           ;main.c: 146: }
  1589  0009BE  D08A               	goto	i2l241
  1590  0009C0                     i2l229:
  1591                           
  1592                           ;main.c: 148: else if (INTCONbits.TMR0IF)
  1593  0009C0  A4F2               	btfss	intcon,2,c	;volatile
  1594  0009C2  D088               	goto	i2l241
  1595                           
  1596                           ;main.c: 149: {
  1597                           ;main.c: 150: INTCONbits.TMR0IF = 0;
  1598  0009C4  94F2               	bcf	intcon,2,c	;volatile
  1599                           
  1600                           ;main.c: 151: TMR0L = 0;
  1601  0009C6  0E00               	movlw	0
  1602  0009C8  6ED6               	movwf	4054,c	;volatile
  1603                           
  1604                           ;main.c: 152: if (++contTempo == 77)
  1605  0009CA  4A39               	infsnz	_contTempo,f,c
  1606  0009CC  2A3A               	incf	_contTempo+1,f,c
  1607  0009CE  0E4D               	movlw	77
  1608  0009D0  1839               	xorwf	_contTempo,w,c
  1609  0009D2  103A               	iorwf	_contTempo+1,w,c
  1610  0009D4  A4D8               	btfss	status,2,c
  1611  0009D6  D07E               	goto	i2l241
  1612                           
  1613                           ;main.c: 153: {
  1614                           ;main.c: 154: contTempo = 0;
  1615  0009D8  0E00               	movlw	0
  1616  0009DA  6E3A               	movwf	_contTempo+1,c
  1617  0009DC  0E00               	movlw	0
  1618  0009DE  6E39               	movwf	_contTempo,c
  1619                           
  1620                           ;main.c: 156: if (cronoProg == 1)
  1621  0009E0  043B               	decf	_cronoProg,w,c
  1622  0009E2  103C               	iorwf	_cronoProg+1,w,c
  1623  0009E4  A4D8               	btfss	status,2,c
  1624  0009E6  D003               	goto	i2l1818
  1625                           
  1626                           ;main.c: 157: {
  1627                           ;main.c: 158: cronoProgressivo();
  1628  0009E8  EC6C  F006         	call	_cronoProgressivo	;wreg free
  1629  0009EC  D000               	goto	i2l1818
  1630  0009EE                     i2l1818:
  1631                           
  1632                           ;main.c: 159: }
  1633                           ;main.c: 161: if (cronoReg == 1)
  1634  0009EE  043D               	decf	_cronoReg,w,c
  1635  0009F0  103E               	iorwf	_cronoReg+1,w,c
  1636  0009F2  A4D8               	btfss	status,2,c
  1637  0009F4  D003               	goto	i2l1822
  1638                           
  1639                           ;main.c: 162: {
  1640                           ;main.c: 163: cronoRegressivo();
  1641  0009F6  EC40  F006         	call	_cronoRegressivo	;wreg free
  1642  0009FA  D000               	goto	i2l1822
  1643  0009FC                     i2l1822:
  1644                           
  1645                           ;main.c: 164: }
  1646                           ;main.c: 166: if (PORTBbits.RB0 == 0)
  1647  0009FC  B081               	btfsc	3969,0,c	;volatile
  1648  0009FE  D034               	goto	i2l1834
  1649                           
  1650                           ;main.c: 167: {
  1651                           ;main.c: 168: contBlink ++;
  1652  000A00  4A37               	infsnz	_contBlink,f,c
  1653  000A02  2A38               	incf	_contBlink+1,f,c
  1654                           
  1655                           ;main.c: 169: if (contBlink == 2)
  1656  000A04  0E02               	movlw	2
  1657  000A06  1837               	xorwf	_contBlink,w,c
  1658  000A08  1038               	iorwf	_contBlink+1,w,c
  1659  000A0A  A4D8               	btfss	status,2,c
  1660  000A0C  D02D               	goto	i2l1834
  1661                           
  1662                           ;main.c: 170: {
  1663                           ;main.c: 171: contBlink = 0;
  1664  000A0E  0E00               	movlw	0
  1665  000A10  6E38               	movwf	_contBlink+1,c
  1666  000A12  0E00               	movlw	0
  1667  000A14  6E37               	movwf	_contBlink,c
  1668                           
  1669                           ;main.c: 172: seg = 0;
  1670  000A16  0E00               	movlw	0
  1671  000A18  6E46               	movwf	_seg+1,c
  1672  000A1A  0E00               	movlw	0
  1673  000A1C  6E45               	movwf	_seg,c
  1674                           
  1675                           ;main.c: 173: min = 0;
  1676  000A1E  0E00               	movlw	0
  1677  000A20  6E40               	movwf	_min+1,c
  1678  000A22  0E00               	movlw	0
  1679  000A24  6E3F               	movwf	_min,c
  1680                           
  1681                           ;main.c: 174: cronoProg = 0;
  1682  000A26  0E00               	movlw	0
  1683  000A28  6E3C               	movwf	_cronoProg+1,c
  1684  000A2A  0E00               	movlw	0
  1685  000A2C  6E3B               	movwf	_cronoProg,c
  1686                           
  1687                           ;main.c: 175: sprintf(texto, "%02d:%02d", min, seg);
  1688  000A2E  0E4B               	movlw	low _texto
  1689  000A30  6E0D               	movwf	sprintf@sp,c
  1690  000A32  0E00               	movlw	high _texto
  1691  000A34  6E0E               	movwf	sprintf@sp+1,c
  1692  000A36  0E26               	movlw	low STR_1
  1693  000A38  6E0F               	movwf	sprintf@f,c
  1694  000A3A  0E06               	movlw	high STR_1
  1695  000A3C  6E10               	movwf	sprintf@f+1,c
  1696  000A3E  C03F  F011         	movff	_min,?_sprintf+4
  1697  000A42  C040  F012         	movff	_min+1,?_sprintf+5
  1698  000A46  C045  F013         	movff	_seg,?_sprintf+6
  1699  000A4A  C046  F014         	movff	_seg+1,?_sprintf+7
  1700  000A4E  EC19  F003         	call	_sprintf	;wreg free
  1701                           
  1702                           ;main.c: 176: escreveLCD("Crono - Prog.", texto);
  1703  000A52  0E0B               	movlw	low STR_2
  1704  000A54  6E06               	movwf	escreveLCD@primeiraLinha,c
  1705  000A56  0E06               	movlw	high STR_2
  1706  000A58  6E07               	movwf	escreveLCD@primeiraLinha+1,c
  1707  000A5A  0E4B               	movlw	low _texto
  1708  000A5C  6E08               	movwf	escreveLCD@segundaLinha,c
  1709  000A5E  0E00               	movlw	high _texto
  1710  000A60  6E09               	movwf	escreveLCD@segundaLinha+1,c
  1711  000A62  EC62  F007         	call	_escreveLCD	;wreg free
  1712  000A66  D000               	goto	i2l1834
  1713  000A68                     i2l1834:
  1714                           
  1715                           ;main.c: 177: }
  1716                           ;main.c: 178: }
  1717                           ;main.c: 180: if (PORTBbits.RB1 == 0)
  1718  000A68  B281               	btfsc	3969,1,c	;volatile
  1719  000A6A  D034               	goto	i2l241
  1720                           
  1721                           ;main.c: 181: {
  1722                           ;main.c: 182: contBlink ++;
  1723  000A6C  4A37               	infsnz	_contBlink,f,c
  1724  000A6E  2A38               	incf	_contBlink+1,f,c
  1725                           
  1726                           ;main.c: 183: if (contBlink == 2)
  1727  000A70  0E02               	movlw	2
  1728  000A72  1837               	xorwf	_contBlink,w,c
  1729  000A74  1038               	iorwf	_contBlink+1,w,c
  1730  000A76  A4D8               	btfss	status,2,c
  1731  000A78  D02D               	goto	i2l241
  1732                           
  1733                           ;main.c: 184: {
  1734                           ;main.c: 185: contBlink = 0;
  1735  000A7A  0E00               	movlw	0
  1736  000A7C  6E38               	movwf	_contBlink+1,c
  1737  000A7E  0E00               	movlw	0
  1738  000A80  6E37               	movwf	_contBlink,c
  1739                           
  1740                           ;main.c: 186: segReg = 59;
  1741  000A82  0E00               	movlw	0
  1742  000A84  6E4A               	movwf	_segReg+1,c
  1743  000A86  0E3B               	movlw	59
  1744  000A88  6E49               	movwf	_segReg,c
  1745                           
  1746                           ;main.c: 187: minReg = 59;
  1747  000A8A  0E00               	movlw	0
  1748  000A8C  6E48               	movwf	_minReg+1,c
  1749  000A8E  0E3B               	movlw	59
  1750  000A90  6E47               	movwf	_minReg,c
  1751                           
  1752                           ;main.c: 188: cronoProg = 0;
  1753  000A92  0E00               	movlw	0
  1754  000A94  6E3C               	movwf	_cronoProg+1,c
  1755  000A96  0E00               	movlw	0
  1756  000A98  6E3B               	movwf	_cronoProg,c
  1757                           
  1758                           ;main.c: 189: sprintf(texto, "%02d:%02d", minReg, segReg);
  1759  000A9A  0E4B               	movlw	low _texto
  1760  000A9C  6E0D               	movwf	sprintf@sp,c
  1761  000A9E  0E00               	movlw	high _texto
  1762  000AA0  6E0E               	movwf	sprintf@sp+1,c
  1763  000AA2  0E26               	movlw	low STR_1
  1764  000AA4  6E0F               	movwf	sprintf@f,c
  1765  000AA6  0E06               	movlw	high STR_1
  1766  000AA8  6E10               	movwf	sprintf@f+1,c
  1767  000AAA  C047  F011         	movff	_minReg,?_sprintf+4
  1768  000AAE  C048  F012         	movff	_minReg+1,?_sprintf+5
  1769  000AB2  C049  F013         	movff	_segReg,?_sprintf+6
  1770  000AB6  C04A  F014         	movff	_segReg+1,?_sprintf+7
  1771  000ABA  EC19  F003         	call	_sprintf	;wreg free
  1772                           
  1773                           ;main.c: 190: escreveLCD("Crono - Reg.", texto);
  1774  000ABE  0E19               	movlw	low STR_4
  1775  000AC0  6E06               	movwf	escreveLCD@primeiraLinha,c
  1776  000AC2  0E06               	movlw	high STR_4
  1777  000AC4  6E07               	movwf	escreveLCD@primeiraLinha+1,c
  1778  000AC6  0E4B               	movlw	low _texto
  1779  000AC8  6E08               	movwf	escreveLCD@segundaLinha,c
  1780  000ACA  0E00               	movlw	high _texto
  1781  000ACC  6E09               	movwf	escreveLCD@segundaLinha+1,c
  1782  000ACE  EC62  F007         	call	_escreveLCD	;wreg free
  1783  000AD2  D000               	goto	i2l241
  1784  000AD4                     i2l241:
  1785  000AD4  C02F  FFF5         	movff	??_interrupcao+13,tablat
  1786  000AD8  C02E  FFF8         	movff	??_interrupcao+12,tblptru
  1787  000ADC  C02D  FFF7         	movff	??_interrupcao+11,tblptrh
  1788  000AE0  C02C  FFF6         	movff	??_interrupcao+10,tblptrl
  1789  000AE4  C02B  FFF4         	movff	??_interrupcao+9,prodh
  1790  000AE8  C02A  FFF3         	movff	??_interrupcao+8,prodl
  1791  000AEC  C029  FFDA         	movff	??_interrupcao+7,fsr2h
  1792  000AF0  C028  FFD9         	movff	??_interrupcao+6,fsr2l
  1793  000AF4  C027  FFE2         	movff	??_interrupcao+5,fsr1h
  1794  000AF8  C026  FFE1         	movff	??_interrupcao+4,fsr1l
  1795  000AFC  C025  FFEA         	movff	??_interrupcao+3,fsr0h
  1796  000B00  C024  FFE9         	movff	??_interrupcao+2,fsr0l
  1797  000B04  C023  FFFB         	movff	??_interrupcao+1,pclatu
  1798  000B08  C022  FFFA         	movff	??_interrupcao,pclath
  1799  000B0C  0011               	retfie		f
  1800  000B0E                     __end_of_interrupcao:
  1801                           	opt stack 0
  1802                           pclatu	equ	0xFFB
  1803                           pclath	equ	0xFFA
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           prodh	equ	0xFF4
  1809                           prodl	equ	0xFF3
  1810                           intcon	equ	0xFF2
  1811                           intcon2	equ	0xFF1
  1812                           intcon3	equ	0xFF0
  1813                           postinc0	equ	0xFEE
  1814                           fsr0h	equ	0xFEA
  1815                           fsr0l	equ	0xFE9
  1816                           wreg	equ	0xFE8
  1817                           postdec1	equ	0xFE5
  1818                           fsr1h	equ	0xFE2
  1819                           fsr1l	equ	0xFE1
  1820                           fsr2h	equ	0xFDA
  1821                           fsr2l	equ	0xFD9
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _cronoRegressivo *****************
  1825 ;; Defined at:
  1826 ;;		line 96 in file "main.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;		None               void
  1833 ;; Registers used:
  1834 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1840 ;;      Params:         0       0       0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    4
  1847 ;; This function calls:
  1848 ;;		_escreveLCD
  1849 ;;		_sprintf
  1850 ;; This function is called by:
  1851 ;;		_interrupcao
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text12
  1856  000C80                     __ptext12:
  1857                           	opt stack 0
  1858  000C80                     _cronoRegressivo:
  1859                           	opt stack 21
  1860                           
  1861                           ;main.c: 98: segReg --;
  1862                           
  1863                           ;incstack = 0
  1864  000C80  0649               	decf	_segReg,f,c
  1865  000C82  A0D8               	btfss	status,0,c
  1866  000C84  064A               	decf	_segReg+1,f,c
  1867                           
  1868                           ;main.c: 100: {
  1869                           ;main.c: 101: minReg = minReg--;
  1870  000C86  5049               	movf	_segReg,w,c
  1871  000C88  104A               	iorwf	_segReg+1,w,c
  1872  000C8A  A4D8               	btfss	status,2,c
  1873  000C8C  D008               	goto	i2l1762
  1874  000C8E  0647               	decf	_minReg,f,c
  1875  000C90  A0D8               	btfss	status,0,c
  1876  000C92  0648               	decf	_minReg+1,f,c
  1877                           
  1878                           ;main.c: 102: segReg = 60;
  1879  000C94  0E00               	movlw	0
  1880  000C96  6E4A               	movwf	_segReg+1,c
  1881  000C98  0E3C               	movlw	60
  1882  000C9A  6E49               	movwf	_segReg,c
  1883  000C9C  D000               	goto	i2l1762
  1884  000C9E                     i2l1762:
  1885                           
  1886                           ;main.c: 103: }
  1887                           ;main.c: 104: sprintf(texto, "%02d:%02d", minReg, segReg);
  1888  000C9E  0E4B               	movlw	low _texto
  1889  000CA0  6E0D               	movwf	sprintf@sp,c
  1890  000CA2  0E00               	movlw	high _texto
  1891  000CA4  6E0E               	movwf	sprintf@sp+1,c
  1892  000CA6  0E26               	movlw	low STR_1
  1893  000CA8  6E0F               	movwf	sprintf@f,c
  1894  000CAA  0E06               	movlw	high STR_1
  1895  000CAC  6E10               	movwf	sprintf@f+1,c
  1896  000CAE  C047  F011         	movff	_minReg,?_sprintf+4
  1897  000CB2  C048  F012         	movff	_minReg+1,?_sprintf+5
  1898  000CB6  C049  F013         	movff	_segReg,?_sprintf+6
  1899  000CBA  C04A  F014         	movff	_segReg+1,?_sprintf+7
  1900  000CBE  EC19  F003         	call	_sprintf	;wreg free
  1901                           
  1902                           ;main.c: 105: escreveLCD("Crono - Reg.", texto);
  1903  000CC2  0E19               	movlw	low STR_4
  1904  000CC4  6E06               	movwf	escreveLCD@primeiraLinha,c
  1905  000CC6  0E06               	movlw	high STR_4
  1906  000CC8  6E07               	movwf	escreveLCD@primeiraLinha+1,c
  1907  000CCA  0E4B               	movlw	low _texto
  1908  000CCC  6E08               	movwf	escreveLCD@segundaLinha,c
  1909  000CCE  0E00               	movlw	high _texto
  1910  000CD0  6E09               	movwf	escreveLCD@segundaLinha+1,c
  1911  000CD2  EC62  F007         	call	_escreveLCD	;wreg free
  1912  000CD6  0012               	return		;funcret
  1913  000CD8                     __end_of_cronoRegressivo:
  1914                           	opt stack 0
  1915                           pclatu	equ	0xFFB
  1916                           pclath	equ	0xFFA
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           prodh	equ	0xFF4
  1922                           prodl	equ	0xFF3
  1923                           intcon	equ	0xFF2
  1924                           intcon2	equ	0xFF1
  1925                           intcon3	equ	0xFF0
  1926                           postinc0	equ	0xFEE
  1927                           fsr0h	equ	0xFEA
  1928                           fsr0l	equ	0xFE9
  1929                           wreg	equ	0xFE8
  1930                           postdec1	equ	0xFE5
  1931                           fsr1h	equ	0xFE2
  1932                           fsr1l	equ	0xFE1
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _cronoProgressivo *****************
  1938 ;; Defined at:
  1939 ;;		line 84 in file "main.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;		None               void
  1946 ;; Registers used:
  1947 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1953 ;;      Params:         0       0       0       0       0       0       0
  1954 ;;      Locals:         0       0       0       0       0       0       0
  1955 ;;      Temps:          0       0       0       0       0       0       0
  1956 ;;      Totals:         0       0       0       0       0       0       0
  1957 ;;Total ram usage:        0 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    4
  1960 ;; This function calls:
  1961 ;;		_escreveLCD
  1962 ;;		_sprintf
  1963 ;; This function is called by:
  1964 ;;		_interrupcao
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text13
  1969  000CD8                     __ptext13:
  1970                           	opt stack 0
  1971  000CD8                     _cronoProgressivo:
  1972                           	opt stack 21
  1973                           
  1974                           ;main.c: 86: seg ++;
  1975                           
  1976                           ;incstack = 0
  1977  000CD8  4A45               	infsnz	_seg,f,c
  1978  000CDA  2A46               	incf	_seg+1,f,c
  1979                           
  1980                           ;main.c: 88: {
  1981                           ;main.c: 89: min = min++;
  1982  000CDC  0E3C               	movlw	60
  1983  000CDE  1845               	xorwf	_seg,w,c
  1984  000CE0  1046               	iorwf	_seg+1,w,c
  1985  000CE2  A4D8               	btfss	status,2,c
  1986  000CE4  D007               	goto	i2l1750
  1987  000CE6  4A3F               	infsnz	_min,f,c
  1988  000CE8  2A40               	incf	_min+1,f,c
  1989                           
  1990                           ;main.c: 90: seg = 0;
  1991  000CEA  0E00               	movlw	0
  1992  000CEC  6E46               	movwf	_seg+1,c
  1993  000CEE  0E00               	movlw	0
  1994  000CF0  6E45               	movwf	_seg,c
  1995  000CF2  D000               	goto	i2l1750
  1996  000CF4                     i2l1750:
  1997                           
  1998                           ;main.c: 91: }
  1999                           ;main.c: 92: sprintf(texto, "%02d:%02d", min, seg);
  2000  000CF4  0E4B               	movlw	low _texto
  2001  000CF6  6E0D               	movwf	sprintf@sp,c
  2002  000CF8  0E00               	movlw	high _texto
  2003  000CFA  6E0E               	movwf	sprintf@sp+1,c
  2004  000CFC  0E26               	movlw	low STR_1
  2005  000CFE  6E0F               	movwf	sprintf@f,c
  2006  000D00  0E06               	movlw	high STR_1
  2007  000D02  6E10               	movwf	sprintf@f+1,c
  2008  000D04  C03F  F011         	movff	_min,?_sprintf+4
  2009  000D08  C040  F012         	movff	_min+1,?_sprintf+5
  2010  000D0C  C045  F013         	movff	_seg,?_sprintf+6
  2011  000D10  C046  F014         	movff	_seg+1,?_sprintf+7
  2012  000D14  EC19  F003         	call	_sprintf	;wreg free
  2013                           
  2014                           ;main.c: 93: escreveLCD("Crono - Prog.", texto);
  2015  000D18  0E0B               	movlw	low STR_2
  2016  000D1A  6E06               	movwf	escreveLCD@primeiraLinha,c
  2017  000D1C  0E06               	movlw	high STR_2
  2018  000D1E  6E07               	movwf	escreveLCD@primeiraLinha+1,c
  2019  000D20  0E4B               	movlw	low _texto
  2020  000D22  6E08               	movwf	escreveLCD@segundaLinha,c
  2021  000D24  0E00               	movlw	high _texto
  2022  000D26  6E09               	movwf	escreveLCD@segundaLinha+1,c
  2023  000D28  EC62  F007         	call	_escreveLCD	;wreg free
  2024  000D2C  0012               	return		;funcret
  2025  000D2E                     __end_of_cronoProgressivo:
  2026                           	opt stack 0
  2027                           pclatu	equ	0xFFB
  2028                           pclath	equ	0xFFA
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           prodh	equ	0xFF4
  2034                           prodl	equ	0xFF3
  2035                           intcon	equ	0xFF2
  2036                           intcon2	equ	0xFF1
  2037                           intcon3	equ	0xFF0
  2038                           postinc0	equ	0xFEE
  2039                           fsr0h	equ	0xFEA
  2040                           fsr0l	equ	0xFE9
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1h	equ	0xFE2
  2044                           fsr1l	equ	0xFE1
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _sprintf *****************
  2050 ;; Defined at:
  2051 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  sp              2   12[COMRAM] PTR unsigned char 
  2054 ;;		 -> texto(5), 
  2055 ;;  f               2   14[COMRAM] PTR const unsigned char 
  2056 ;;		 -> STR_9(10), STR_7(10), STR_3(10), STR_1(10), 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;  tmpval          4    0        struct .
  2059 ;;  cp              3    0        PTR const unsigned char 
  2060 ;;  width           2   30[COMRAM] int 
  2061 ;;  val             2   27[COMRAM] unsigned int 
  2062 ;;  ap              2   24[COMRAM] PTR void [1]
  2063 ;;		 -> ?_sprintf(2), 
  2064 ;;  len             2    0        unsigned int 
  2065 ;;  c               1   32[COMRAM] char 
  2066 ;;  flag            1   29[COMRAM] unsigned char 
  2067 ;;  prec            1   26[COMRAM] char 
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  2   12[COMRAM] int 
  2070 ;; Registers used:
  2071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2077 ;;      Params:         8       0       0       0       0       0       0
  2078 ;;      Locals:         9       0       0       0       0       0       0
  2079 ;;      Temps:          4       0       0       0       0       0       0
  2080 ;;      Totals:        21       0       0       0       0       0       0
  2081 ;;Total ram usage:       21 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:    1
  2084 ;; This function calls:
  2085 ;;		___lwdiv
  2086 ;;		___lwmod
  2087 ;;		___wmul
  2088 ;;		_isdigit
  2089 ;; This function is called by:
  2090 ;;		_cronoProgressivo
  2091 ;;		_cronoRegressivo
  2092 ;;		_interrupcao
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text14
  2097  000632                     __ptext14:
  2098                           	opt stack 0
  2099  000632                     _sprintf:
  2100                           	opt stack 24
  2101                           
  2102                           ;doprnt.c: 494: va_list ap;
  2103                           ;doprnt.c: 499: signed char c;
  2104                           ;doprnt.c: 501: int width;
  2105                           ;doprnt.c: 506: signed char prec;
  2106                           ;doprnt.c: 508: unsigned char flag;
  2107                           ;doprnt.c: 523: union {
  2108                           ;doprnt.c: 524: unsigned long vd;
  2109                           ;doprnt.c: 525: double integ;
  2110                           ;doprnt.c: 526: } tmpval;
  2111                           ;doprnt.c: 528: unsigned int val;
  2112                           ;doprnt.c: 529: unsigned len;
  2113                           ;doprnt.c: 530: const char * cp;
  2114                           ;doprnt.c: 533: *ap = __va_start();
  2115                           
  2116                           ;incstack = 0
  2117  000632  0E11               	movlw	low (?_sprintf+4)
  2118  000634  6E19               	movwf	sprintf@ap,c
  2119  000636  0E00               	movlw	high (?_sprintf+4)
  2120  000638  6E1A               	movwf	sprintf@ap+1,c
  2121                           
  2122                           ;doprnt.c: 536: while(c = *f++) {
  2123  00063A  D14D               	goto	i2l1736
  2124  00063C                     i2l1630:
  2125                           
  2126                           ;doprnt.c: 538: if(c != '%')
  2127  00063C  0E25               	movlw	37
  2128  00063E  1821               	xorwf	sprintf@c,w,c
  2129  000640  B4D8               	btfsc	status,2,c
  2130  000642  D009               	goto	i2l1636
  2131                           
  2132                           ;doprnt.c: 540: {
  2133                           ;doprnt.c: 541: ((*sp++ = (c)));
  2134  000644  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2135  000648  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2136  00064C  C021  FFDF         	movff	sprintf@c,indf2
  2137  000650  4A0D               	infsnz	sprintf@sp,f,c
  2138  000652  2A0E               	incf	sprintf@sp+1,f,c
  2139                           
  2140                           ;doprnt.c: 542: continue;
  2141  000654  D140               	goto	i2l1736
  2142  000656                     i2l1636:
  2143                           
  2144                           ;doprnt.c: 543: }
  2145                           ;doprnt.c: 546: width = 0;
  2146  000656  0E00               	movlw	0
  2147  000658  6E20               	movwf	sprintf@width+1,c
  2148  00065A  0E00               	movlw	0
  2149  00065C  6E1F               	movwf	sprintf@width,c
  2150                           
  2151                           ;doprnt.c: 548: flag = 0;
  2152  00065E  0E00               	movlw	0
  2153  000660  6E1E               	movwf	sprintf@flag,c
  2154                           
  2155                           ;doprnt.c: 551: switch(*f) {
  2156                           
  2157                           ;doprnt.c: 550: for(;;) {
  2158  000662  D005               	goto	i2l1642
  2159  000664                     i2l1638:
  2160                           
  2161                           ;doprnt.c: 580: flag |= 0x04;
  2162  000664  841E               	bsf	sprintf@flag,2,c
  2163                           
  2164                           ;doprnt.c: 581: f++;
  2165  000666  4A0F               	infsnz	sprintf@f,f,c
  2166  000668  2A10               	incf	sprintf@f+1,f,c
  2167                           
  2168                           ;doprnt.c: 582: continue;
  2169  00066A  D001               	goto	i2l1642
  2170                           
  2171                           ;doprnt.c: 584: }
  2172  00066C  D00B               	goto	i2l1644
  2173  00066E                     i2l1642:
  2174  00066E  C00F  FFF6         	movff	sprintf@f,tblptrl
  2175  000672  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2176  000676                     	if	0	;tblptru may be non-zero
  2177  000676                     	endif
  2178  000676                     	if	0	;tblptru may be non-zero
  2179  000676                     	endif
  2180  000676  0008               	tblrd		*
  2181  000678  50F5               	movf	tablat,w,c
  2182                           
  2183                           ; Switch size 1, requested type "space"
  2184                           ; Number of cases is 1, Range of values is 48 to 48
  2185                           ; switch strategies available:
  2186                           ; Name         Instructions Cycles
  2187                           ; simple_byte            4     3 (average)
  2188                           ;	Chosen strategy is simple_byte
  2189  00067A  0A30               	xorlw	48	; case 48
  2190  00067C  B4D8               	btfsc	status,2,c
  2191  00067E  D7F2               	goto	i2l1638
  2192                           
  2193                           ;doprnt.c: 585: break;
  2194  000680  D001               	goto	i2l1644
  2195                           
  2196                           ;doprnt.c: 586: }
  2197  000682  D7F5               	goto	i2l1642
  2198  000684                     i2l1644:
  2199                           
  2200                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2201  000684  C00F  FFF6         	movff	sprintf@f,tblptrl
  2202  000688  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2203  00068C                     	if	0	;tblptru may be non-zero
  2204  00068C                     	endif
  2205  00068C                     	if	0	;tblptru may be non-zero
  2206  00068C                     	endif
  2207  00068C  0008               	tblrd		*
  2208  00068E  50F5               	movf	tablat,w,c
  2209  000690  ECCA  F007         	call	_isdigit
  2210  000694  A0D8               	btfss	status,0,c
  2211  000696  D039               	goto	i2l1658
  2212                           
  2213                           ;doprnt.c: 598: width = 0;
  2214  000698  0E00               	movlw	0
  2215  00069A  6E20               	movwf	sprintf@width+1,c
  2216  00069C  0E00               	movlw	0
  2217  00069E  6E1F               	movwf	sprintf@width,c
  2218  0006A0  D000               	goto	i2l1648
  2219  0006A2                     i2l1648:
  2220                           
  2221                           ;doprnt.c: 600: width *= 10;
  2222  0006A2  C01F  F001         	movff	sprintf@width,___wmul@multiplier
  2223  0006A6  C020  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  2224  0006AA  0E00               	movlw	0
  2225  0006AC  6E04               	movwf	___wmul@multiplicand+1,c
  2226  0006AE  0E0A               	movlw	10
  2227  0006B0  6E03               	movwf	___wmul@multiplicand,c
  2228  0006B2  EC90  F007         	call	___wmul	;wreg free
  2229  0006B6  C001  F01F         	movff	?___wmul,sprintf@width
  2230  0006BA  C002  F020         	movff	?___wmul+1,sprintf@width+1
  2231                           
  2232                           ;doprnt.c: 601: width += *f++ - '0';
  2233  0006BE  0ED0               	movlw	208
  2234  0006C0  6E15               	movwf	??_sprintf& (0+255),c
  2235  0006C2  0EFF               	movlw	255
  2236  0006C4  6E16               	movwf	(??_sprintf+1)& (0+255),c
  2237  0006C6  C00F  FFF6         	movff	sprintf@f,tblptrl
  2238  0006CA  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2239  0006CE                     	if	0	;tblptru may be non-zero
  2240  0006CE                     	endif
  2241  0006CE                     	if	0	;tblptru may be non-zero
  2242  0006CE                     	endif
  2243  0006CE  0008               	tblrd		*
  2244  0006D0  50F5               	movf	tablat,w,c
  2245  0006D2  6E17               	movwf	(??_sprintf+2)& (0+255),c
  2246  0006D4  6A18               	clrf	(??_sprintf+3)& (0+255),c
  2247  0006D6  5015               	movf	??_sprintf,w,c
  2248  0006D8  2617               	addwf	??_sprintf+2,f,c
  2249  0006DA  5016               	movf	??_sprintf+1,w,c
  2250  0006DC  2218               	addwfc	??_sprintf+3,f,c
  2251  0006DE  5017               	movf	??_sprintf+2,w,c
  2252  0006E0  261F               	addwf	sprintf@width,f,c
  2253  0006E2  5018               	movf	??_sprintf+3,w,c
  2254  0006E4  2220               	addwfc	sprintf@width+1,f,c
  2255  0006E6  4A0F               	infsnz	sprintf@f,f,c
  2256  0006E8  2A10               	incf	sprintf@f+1,f,c
  2257                           
  2258                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2259  0006EA  C00F  FFF6         	movff	sprintf@f,tblptrl
  2260  0006EE  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2261  0006F2                     	if	0	;tblptru may be non-zero
  2262  0006F2                     	endif
  2263  0006F2                     	if	0	;tblptru may be non-zero
  2264  0006F2                     	endif
  2265  0006F2  0008               	tblrd		*
  2266  0006F4  50F5               	movf	tablat,w,c
  2267  0006F6  ECCA  F007         	call	_isdigit
  2268  0006FA  A0D8               	btfss	status,0,c
  2269  0006FC  D006               	goto	i2l1658
  2270  0006FE  D7D1               	goto	i2l1648
  2271                           
  2272                           ;doprnt.c: 608: }
  2273                           ;doprnt.c: 635: switch(c = *f++) {
  2274  000700  D004               	goto	i2l1658
  2275                           
  2276                           ;doprnt.c: 638: goto alldone;
  2277                           
  2278                           ;doprnt.c: 637: case 0:
  2279  000702  D0F7               	goto	i2l1738
  2280                           
  2281                           ;doprnt.c: 698: case 'i':
  2282                           ;doprnt.c: 699: break;
  2283                           
  2284                           ;doprnt.c: 697: case 'd':
  2285  000704  D015               	goto	i2l1660
  2286                           
  2287                           ;doprnt.c: 813: continue;
  2288                           
  2289                           ;doprnt.c: 802: default:
  2290  000706  D0E7               	goto	i2l1736
  2291                           
  2292                           ;doprnt.c: 822: }
  2293  000708  D013               	goto	i2l1660
  2294  00070A                     i2l1658:
  2295  00070A  C00F  FFF6         	movff	sprintf@f,tblptrl
  2296  00070E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2297  000712  4A0F               	infsnz	sprintf@f,f,c
  2298  000714  2A10               	incf	sprintf@f+1,f,c
  2299  000716                     	if	0	;tblptru may be non-zero
  2300  000716                     	endif
  2301  000716                     	if	0	;tblptru may be non-zero
  2302  000716                     	endif
  2303  000716  0008               	tblrd		*
  2304  000718  CFF5 F021          	movff	tablat,sprintf@c
  2305  00071C  5021               	movf	sprintf@c,w,c
  2306                           
  2307                           ; Switch size 1, requested type "space"
  2308                           ; Number of cases is 3, Range of values is 0 to 105
  2309                           ; switch strategies available:
  2310                           ; Name         Instructions Cycles
  2311                           ; simple_byte           10     6 (average)
  2312                           ;	Chosen strategy is simple_byte
  2313  00071E  0A00               	xorlw	0	; case 0
  2314  000720  B4D8               	btfsc	status,2,c
  2315  000722  D0E7               	goto	i2l1738
  2316  000724  0A64               	xorlw	100	; case 100
  2317  000726  B4D8               	btfsc	status,2,c
  2318  000728  D003               	goto	i2l1660
  2319  00072A  0A0D               	xorlw	13	; case 105
  2320  00072C  A4D8               	btfss	status,2,c
  2321  00072E  D0D3               	goto	i2l1736
  2322  000730                     i2l1660:
  2323                           
  2324                           ;doprnt.c: 1253: {
  2325                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2326  000730  C019  FFD9         	movff	sprintf@ap,fsr2l
  2327  000734  C01A  FFDA         	movff	sprintf@ap+1,fsr2h
  2328  000738  CFDE F01C          	movff	postinc2,sprintf@val
  2329  00073C  CFDD F01D          	movff	postdec2,sprintf@val+1
  2330  000740  0E02               	movlw	2
  2331  000742  2619               	addwf	sprintf@ap,f,c
  2332  000744  0E00               	movlw	0
  2333  000746  221A               	addwfc	sprintf@ap+1,f,c
  2334                           
  2335                           ;doprnt.c: 1261: if((int)val < 0) {
  2336  000748  AE1D               	btfss	sprintf@val+1,7,c
  2337  00074A  D007               	goto	i2l1670
  2338                           
  2339                           ;doprnt.c: 1262: flag |= 0x03;
  2340  00074C  0E03               	movlw	3
  2341  00074E  121E               	iorwf	sprintf@flag,f,c
  2342                           
  2343                           ;doprnt.c: 1263: val = -val;
  2344  000750  6C1C               	negf	sprintf@val,c
  2345  000752  1E1D               	comf	sprintf@val+1,f,c
  2346  000754  B0D8               	btfsc	status,0,c
  2347  000756  2A1D               	incf	sprintf@val+1,f,c
  2348  000758  D000               	goto	i2l1670
  2349  00075A                     i2l1670:
  2350                           
  2351                           ;doprnt.c: 1264: }
  2352                           ;doprnt.c: 1266: }
  2353                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2354  00075A  0E01               	movlw	1
  2355  00075C  6E21               	movwf	sprintf@c,c
  2356  00075E                     i2l1672:
  2357  00075E  0E05               	movlw	5
  2358  000760  1821               	xorwf	sprintf@c,w,c
  2359  000762  B4D8               	btfsc	status,2,c
  2360  000764  D016               	goto	i2l1684
  2361  000766  D001               	goto	i2l1676
  2362  000768  D014               	goto	i2l1684
  2363  00076A                     i2l1676:
  2364                           
  2365                           ;doprnt.c: 1306: if(val < dpowers[c])
  2366  00076A  5021               	movf	sprintf@c,w,c
  2367  00076C  0D02               	mullw	2
  2368  00076E  0E01               	movlw	low _dpowers
  2369  000770  24F3               	addwf	prodl,w,c
  2370  000772  6EF6               	movwf	tblptrl,c
  2371  000774  0E06               	movlw	high _dpowers
  2372  000776  20F4               	addwfc	prodh,w,c
  2373  000778  6EF7               	movwf	tblptrh,c
  2374  00077A                     	if	0	;There are less than 3 active tblptr bytes
  2375  00077A                     	endif
  2376  00077A  0009               	tblrd		*+
  2377  00077C  50F5               	movf	tablat,w,c
  2378  00077E  5C1C               	subwf	sprintf@val,w,c
  2379  000780  0009               	tblrd		*+
  2380  000782  50F5               	movf	tablat,w,c
  2381  000784  581D               	subwfb	sprintf@val+1,w,c
  2382  000786  A0D8               	btfss	status,0,c
  2383  000788  D004               	goto	i2l1684
  2384  00078A  D001               	goto	i2l1680
  2385                           
  2386                           ;doprnt.c: 1307: break;
  2387  00078C  D002               	goto	i2l1684
  2388  00078E                     i2l1680:
  2389  00078E  2A21               	incf	sprintf@c,f,c
  2390  000790  D7E6               	goto	i2l1672
  2391  000792                     i2l1684:
  2392                           
  2393                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2394  000792  501F               	movf	sprintf@width,w,c
  2395  000794  1020               	iorwf	sprintf@width+1,w,c
  2396  000796  B4D8               	btfsc	status,2,c
  2397  000798  D00A               	goto	i2l1690
  2398  00079A  C01E  F015         	movff	sprintf@flag,??_sprintf
  2399  00079E  0E03               	movlw	3
  2400  0007A0  1615               	andwf	??_sprintf,f,c
  2401  0007A2  B4D8               	btfsc	status,2,c
  2402  0007A4  D004               	goto	i2l1690
  2403                           
  2404                           ;doprnt.c: 1346: width--;
  2405  0007A6  061F               	decf	sprintf@width,f,c
  2406  0007A8  A0D8               	btfss	status,0,c
  2407  0007AA  0620               	decf	sprintf@width+1,f,c
  2408  0007AC  D000               	goto	i2l1690
  2409  0007AE                     i2l1690:
  2410                           
  2411                           ;doprnt.c: 1381: if(width > c)
  2412  0007AE  0E80               	movlw	128
  2413  0007B0  BE21               	btfsc	sprintf@c,7,c
  2414  0007B2  0E7F               	movlw	127
  2415  0007B4  6E15               	movwf	??_sprintf& (0+255),c
  2416  0007B6  501F               	movf	sprintf@width,w,c
  2417  0007B8  5C21               	subwf	sprintf@c,w,c
  2418  0007BA  5020               	movf	sprintf@width+1,w,c
  2419  0007BC  0A80               	xorlw	128
  2420  0007BE  5815               	subwfb	??_sprintf& (0+255),w,c
  2421  0007C0  B0D8               	btfsc	status,0,c
  2422  0007C2  D007               	goto	i2l1694
  2423                           
  2424                           ;doprnt.c: 1382: width -= c;
  2425  0007C4  5021               	movf	sprintf@c,w,c
  2426  0007C6  5E1F               	subwf	sprintf@width,f,c
  2427  0007C8  0E00               	movlw	0
  2428  0007CA  BE21               	btfsc	sprintf@c,7,c
  2429  0007CC  0EFF               	movlw	255
  2430  0007CE  5A20               	subwfb	sprintf@width+1,f,c
  2431  0007D0  D005               	goto	i2l1696
  2432  0007D2                     i2l1694:
  2433                           
  2434                           ;doprnt.c: 1383: else
  2435                           ;doprnt.c: 1384: width = 0;
  2436  0007D2  0E00               	movlw	0
  2437  0007D4  6E20               	movwf	sprintf@width+1,c
  2438  0007D6  0E00               	movlw	0
  2439  0007D8  6E1F               	movwf	sprintf@width,c
  2440  0007DA  D000               	goto	i2l1696
  2441  0007DC                     i2l1696:
  2442                           
  2443                           ;doprnt.c: 1387: if(flag & 0x04) {
  2444  0007DC  A41E               	btfss	sprintf@flag,2,c
  2445  0007DE  D024               	goto	i2l1712
  2446                           
  2447                           ;doprnt.c: 1392: if(flag & 0x03)
  2448  0007E0  C01E  F015         	movff	sprintf@flag,??_sprintf
  2449  0007E4  0E03               	movlw	3
  2450  0007E6  1615               	andwf	??_sprintf,f,c
  2451  0007E8  B4D8               	btfsc	status,2,c
  2452  0007EA  D009               	goto	i2l1704
  2453                           
  2454                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  2455  0007EC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2456  0007F0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2457  0007F4  0E2D               	movlw	45
  2458  0007F6  6EDF               	movwf	indf2,c
  2459  0007F8  4A0D               	infsnz	sprintf@sp,f,c
  2460  0007FA  2A0E               	incf	sprintf@sp+1,f,c
  2461  0007FC  D000               	goto	i2l1704
  2462  0007FE                     i2l1704:
  2463                           
  2464                           ;doprnt.c: 1415: if(width)
  2465  0007FE  501F               	movf	sprintf@width,w,c
  2466  000800  1020               	iorwf	sprintf@width+1,w,c
  2467  000802  B4D8               	btfsc	status,2,c
  2468  000804  D035               	goto	i2l1726
  2469  000806                     i2l1706:
  2470                           
  2471                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2472  000806  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2473  00080A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2474  00080E  0E30               	movlw	48
  2475  000810  6EDF               	movwf	indf2,c
  2476  000812  4A0D               	infsnz	sprintf@sp,f,c
  2477  000814  2A0E               	incf	sprintf@sp+1,f,c
  2478                           
  2479                           ;doprnt.c: 1418: while(--width);
  2480  000816  061F               	decf	sprintf@width,f,c
  2481  000818  A0D8               	btfss	status,0,c
  2482  00081A  0620               	decf	sprintf@width+1,f,c
  2483  00081C  501F               	movf	sprintf@width,w,c
  2484  00081E  1020               	iorwf	sprintf@width+1,w,c
  2485  000820  B4D8               	btfsc	status,2,c
  2486  000822  D026               	goto	i2l1726
  2487  000824  D7F0               	goto	i2l1706
  2488                           
  2489                           ;doprnt.c: 1420: } else
  2490  000826  D024               	goto	i2l1726
  2491  000828                     i2l1712:
  2492                           
  2493                           ;doprnt.c: 1422: {
  2494                           ;doprnt.c: 1424: if(width
  2495                           ;doprnt.c: 1428: )
  2496  000828  501F               	movf	sprintf@width,w,c
  2497  00082A  1020               	iorwf	sprintf@width+1,w,c
  2498  00082C  B4D8               	btfsc	status,2,c
  2499  00082E  D011               	goto	i2l1720
  2500  000830                     i2l1714:
  2501                           
  2502                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2503  000830  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2504  000834  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2505  000838  0E20               	movlw	32
  2506  00083A  6EDF               	movwf	indf2,c
  2507  00083C  4A0D               	infsnz	sprintf@sp,f,c
  2508  00083E  2A0E               	incf	sprintf@sp+1,f,c
  2509                           
  2510                           ;doprnt.c: 1431: while(--width);
  2511  000840  061F               	decf	sprintf@width,f,c
  2512  000842  A0D8               	btfss	status,0,c
  2513  000844  0620               	decf	sprintf@width+1,f,c
  2514  000846  501F               	movf	sprintf@width,w,c
  2515  000848  1020               	iorwf	sprintf@width+1,w,c
  2516  00084A  B4D8               	btfsc	status,2,c
  2517  00084C  D002               	goto	i2l1720
  2518  00084E  D7F0               	goto	i2l1714
  2519  000850  D000               	goto	i2l1720
  2520  000852                     i2l1720:
  2521                           
  2522                           ;doprnt.c: 1438: if(flag & 0x03)
  2523  000852  C01E  F015         	movff	sprintf@flag,??_sprintf
  2524  000856  0E03               	movlw	3
  2525  000858  1615               	andwf	??_sprintf,f,c
  2526  00085A  B4D8               	btfsc	status,2,c
  2527  00085C  D009               	goto	i2l1726
  2528                           
  2529                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2530  00085E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2531  000862  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2532  000866  0E2D               	movlw	45
  2533  000868  6EDF               	movwf	indf2,c
  2534  00086A  4A0D               	infsnz	sprintf@sp,f,c
  2535  00086C  2A0E               	incf	sprintf@sp+1,f,c
  2536  00086E  D000               	goto	i2l1726
  2537  000870                     i2l1726:
  2538                           
  2539                           ;doprnt.c: 1469: }
  2540                           ;doprnt.c: 1472: prec = c;
  2541  000870  C021  F01B         	movff	sprintf@c,sprintf@prec
  2542                           
  2543                           ;doprnt.c: 1474: while(prec--) {
  2544  000874  D02A               	goto	i2l1734
  2545  000876                     i2l1728:
  2546                           
  2547                           ;doprnt.c: 1478: {
  2548                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2549  000876  501B               	movf	sprintf@prec,w,c
  2550  000878  0D02               	mullw	2
  2551  00087A  0E01               	movlw	low _dpowers
  2552  00087C  24F3               	addwf	prodl,w,c
  2553  00087E  6EF6               	movwf	tblptrl,c
  2554  000880  0E06               	movlw	high _dpowers
  2555  000882  20F4               	addwfc	prodh,w,c
  2556  000884  6EF7               	movwf	tblptrh,c
  2557  000886                     	if	0	;There are less than 3 active tblptr bytes
  2558  000886                     	endif
  2559  000886  0009               	tblrd		*+
  2560  000888  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2561  00088C  000A               	tblrd		*-
  2562  00088E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2563  000892  C01C  F001         	movff	sprintf@val,___lwdiv@dividend
  2564  000896  C01D  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2565  00089A  EC12  F006         	call	___lwdiv	;wreg free
  2566  00089E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2567  0008A2  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2568  0008A6  0E00               	movlw	0
  2569  0008A8  6E0B               	movwf	___lwmod@divisor+1,c
  2570  0008AA  0E0A               	movlw	10
  2571  0008AC  6E0A               	movwf	___lwmod@divisor,c
  2572  0008AE  ECC1  F006         	call	___lwmod	;wreg free
  2573  0008B2  5008               	movf	?___lwmod,w,c
  2574  0008B4  0F30               	addlw	48
  2575  0008B6  6E21               	movwf	sprintf@c,c
  2576                           
  2577                           ;doprnt.c: 1523: }
  2578                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2579  0008B8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2580  0008BC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2581  0008C0  C021  FFDF         	movff	sprintf@c,indf2
  2582  0008C4  4A0D               	infsnz	sprintf@sp,f,c
  2583  0008C6  2A0E               	incf	sprintf@sp+1,f,c
  2584  0008C8  D000               	goto	i2l1734
  2585  0008CA                     i2l1734:
  2586  0008CA  061B               	decf	sprintf@prec,f,c
  2587  0008CC  281B               	incf	sprintf@prec,w,c
  2588  0008CE  B4D8               	btfsc	status,2,c
  2589  0008D0  D002               	goto	i2l1736
  2590  0008D2  D7D1               	goto	i2l1728
  2591  0008D4  D000               	goto	i2l1736
  2592  0008D6                     i2l1736:
  2593  0008D6  C00F  FFF6         	movff	sprintf@f,tblptrl
  2594  0008DA  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2595  0008DE  4A0F               	infsnz	sprintf@f,f,c
  2596  0008E0  2A10               	incf	sprintf@f+1,f,c
  2597  0008E2                     	if	0	;tblptru may be non-zero
  2598  0008E2                     	endif
  2599  0008E2                     	if	0	;tblptru may be non-zero
  2600  0008E2                     	endif
  2601  0008E2  0008               	tblrd		*
  2602  0008E4  CFF5 F021          	movff	tablat,sprintf@c
  2603  0008E8  5021               	movf	sprintf@c,w,c
  2604  0008EA  B4D8               	btfsc	status,2,c
  2605  0008EC  D002               	goto	i2l1738
  2606  0008EE  D6A6               	goto	i2l1630
  2607  0008F0  D000               	goto	i2l1738
  2608  0008F2                     i2l1738:
  2609                           
  2610                           ;doprnt.c: 1538: *sp = 0;
  2611  0008F2  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2612  0008F6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2613  0008FA  0E00               	movlw	0
  2614  0008FC  6EDF               	movwf	indf2,c
  2615  0008FE  D000               	goto	i2l298
  2616  000900                     i2l298:
  2617  000900  0012               	return		;funcret
  2618  000902                     __end_of_sprintf:
  2619                           	opt stack 0
  2620                           pclatu	equ	0xFFB
  2621                           pclath	equ	0xFFA
  2622                           tblptru	equ	0xFF8
  2623                           tblptrh	equ	0xFF7
  2624                           tblptrl	equ	0xFF6
  2625                           tablat	equ	0xFF5
  2626                           prodh	equ	0xFF4
  2627                           prodl	equ	0xFF3
  2628                           intcon	equ	0xFF2
  2629                           intcon2	equ	0xFF1
  2630                           intcon3	equ	0xFF0
  2631                           postinc0	equ	0xFEE
  2632                           fsr0h	equ	0xFEA
  2633                           fsr0l	equ	0xFE9
  2634                           wreg	equ	0xFE8
  2635                           postdec1	equ	0xFE5
  2636                           fsr1h	equ	0xFE2
  2637                           fsr1l	equ	0xFE1
  2638                           indf2	equ	0xFDF
  2639                           postinc2	equ	0xFDE
  2640                           postdec2	equ	0xFDD
  2641                           fsr2h	equ	0xFDA
  2642                           fsr2l	equ	0xFD9
  2643                           status	equ	0xFD8
  2644                           
  2645 ;; *************** function _isdigit *****************
  2646 ;; Defined at:
  2647 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  c               1    wreg     unsigned char 
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;  c               1    2[COMRAM] unsigned char 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;		None               void
  2654 ;; Registers used:
  2655 ;;		wreg, status,2, status,0
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2661 ;;      Params:         0       0       0       0       0       0       0
  2662 ;;      Locals:         2       0       0       0       0       0       0
  2663 ;;      Temps:          1       0       0       0       0       0       0
  2664 ;;      Totals:         3       0       0       0       0       0       0
  2665 ;;Total ram usage:        3 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_sprintf
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           	psect	text15
  2675  000F94                     __ptext15:
  2676                           	opt stack 0
  2677  000F94                     _isdigit:
  2678                           	opt stack 24
  2679                           
  2680                           ;incstack = 0
  2681                           ;isdigit@c stored from wreg
  2682  000F94  6E03               	movwf	isdigit@c,c
  2683  000F96  0E00               	movlw	0
  2684  000F98  6E02               	movwf	_isdigit$1332,c
  2685  000F9A  0E3A               	movlw	58
  2686  000F9C  6003               	cpfslt	isdigit@c,c
  2687  000F9E  D006               	goto	i2l1544
  2688  000FA0  0E2F               	movlw	47
  2689  000FA2  6403               	cpfsgt	isdigit@c,c
  2690  000FA4  D003               	goto	i2l1544
  2691  000FA6  0E01               	movlw	1
  2692  000FA8  6E02               	movwf	_isdigit$1332,c
  2693  000FAA  D000               	goto	i2l1544
  2694  000FAC                     i2l1544:
  2695  000FAC  C002  F001         	movff	_isdigit$1332,??_isdigit
  2696  000FB0  3001               	rrcf	??_isdigit,w,c
  2697  000FB2  D000               	goto	i2l739
  2698  000FB4                     i2l739:
  2699  000FB4  0012               	return		;funcret
  2700  000FB6                     __end_of_isdigit:
  2701                           	opt stack 0
  2702                           pclatu	equ	0xFFB
  2703                           pclath	equ	0xFFA
  2704                           tblptru	equ	0xFF8
  2705                           tblptrh	equ	0xFF7
  2706                           tblptrl	equ	0xFF6
  2707                           tablat	equ	0xFF5
  2708                           prodh	equ	0xFF4
  2709                           prodl	equ	0xFF3
  2710                           intcon	equ	0xFF2
  2711                           intcon2	equ	0xFF1
  2712                           intcon3	equ	0xFF0
  2713                           postinc0	equ	0xFEE
  2714                           fsr0h	equ	0xFEA
  2715                           fsr0l	equ	0xFE9
  2716                           wreg	equ	0xFE8
  2717                           postdec1	equ	0xFE5
  2718                           fsr1h	equ	0xFE2
  2719                           fsr1l	equ	0xFE1
  2720                           indf2	equ	0xFDF
  2721                           postinc2	equ	0xFDE
  2722                           postdec2	equ	0xFDD
  2723                           fsr2h	equ	0xFDA
  2724                           fsr2l	equ	0xFD9
  2725                           status	equ	0xFD8
  2726                           
  2727 ;; *************** function ___wmul *****************
  2728 ;; Defined at:
  2729 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;  multiplier      2    0[COMRAM] unsigned int 
  2732 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  product         2    4[COMRAM] unsigned int 
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  2    0[COMRAM] unsigned int 
  2737 ;; Registers used:
  2738 ;;		wreg, status,2, status,0, prodl, prodh
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2744 ;;      Params:         4       0       0       0       0       0       0
  2745 ;;      Locals:         2       0       0       0       0       0       0
  2746 ;;      Temps:          0       0       0       0       0       0       0
  2747 ;;      Totals:         6       0       0       0       0       0       0
  2748 ;;Total ram usage:        6 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_sprintf
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text16
  2758  000F20                     __ptext16:
  2759                           	opt stack 0
  2760  000F20                     ___wmul:
  2761                           	opt stack 24
  2762                           
  2763                           ;incstack = 0
  2764  000F20  5001               	movf	___wmul@multiplier,w,c
  2765  000F22  0203               	mulwf	___wmul@multiplicand,c
  2766  000F24  CFF3 F005          	movff	prodl,___wmul@product
  2767  000F28  CFF4 F006          	movff	prodh,___wmul@product+1
  2768  000F2C  5001               	movf	___wmul@multiplier,w,c
  2769  000F2E  0204               	mulwf	___wmul@multiplicand+1,c
  2770  000F30  50F3               	movf	prodl,w,c
  2771  000F32  2606               	addwf	___wmul@product+1,f,c
  2772  000F34  5002               	movf	___wmul@multiplier+1,w,c
  2773  000F36  0203               	mulwf	___wmul@multiplicand,c
  2774  000F38  50F3               	movf	prodl,w,c
  2775  000F3A  2606               	addwf	___wmul@product+1,f,c
  2776  000F3C  C005  F001         	movff	___wmul@product,?___wmul
  2777  000F40  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2778  000F44  D000               	goto	i2l301
  2779  000F46                     i2l301:
  2780  000F46  0012               	return		;funcret
  2781  000F48                     __end_of___wmul:
  2782                           	opt stack 0
  2783                           pclatu	equ	0xFFB
  2784                           pclath	equ	0xFFA
  2785                           tblptru	equ	0xFF8
  2786                           tblptrh	equ	0xFF7
  2787                           tblptrl	equ	0xFF6
  2788                           tablat	equ	0xFF5
  2789                           prodh	equ	0xFF4
  2790                           prodl	equ	0xFF3
  2791                           intcon	equ	0xFF2
  2792                           intcon2	equ	0xFF1
  2793                           intcon3	equ	0xFF0
  2794                           postinc0	equ	0xFEE
  2795                           fsr0h	equ	0xFEA
  2796                           fsr0l	equ	0xFE9
  2797                           wreg	equ	0xFE8
  2798                           postdec1	equ	0xFE5
  2799                           fsr1h	equ	0xFE2
  2800                           fsr1l	equ	0xFE1
  2801                           indf2	equ	0xFDF
  2802                           postinc2	equ	0xFDE
  2803                           postdec2	equ	0xFDD
  2804                           fsr2h	equ	0xFDA
  2805                           fsr2l	equ	0xFD9
  2806                           status	equ	0xFD8
  2807                           
  2808 ;; *************** function ___lwmod *****************
  2809 ;; Defined at:
  2810 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  dividend        2    7[COMRAM] unsigned int 
  2813 ;;  divisor         2    9[COMRAM] unsigned int 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  counter         1   11[COMRAM] unsigned char 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  2    7[COMRAM] unsigned int 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2825 ;;      Params:         4       0       0       0       0       0       0
  2826 ;;      Locals:         1       0       0       0       0       0       0
  2827 ;;      Temps:          0       0       0       0       0       0       0
  2828 ;;      Totals:         5       0       0       0       0       0       0
  2829 ;;Total ram usage:        5 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; This function calls:
  2832 ;;		Nothing
  2833 ;; This function is called by:
  2834 ;;		_sprintf
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text17
  2839  000D82                     __ptext17:
  2840                           	opt stack 0
  2841  000D82                     ___lwmod:
  2842                           	opt stack 24
  2843                           
  2844                           ;incstack = 0
  2845  000D82  500A               	movf	___lwmod@divisor,w,c
  2846  000D84  100B               	iorwf	___lwmod@divisor+1,w,c
  2847  000D86  B4D8               	btfsc	status,2,c
  2848  000D88  D01D               	goto	i2l841
  2849  000D8A  0E01               	movlw	1
  2850  000D8C  6E0C               	movwf	___lwmod@counter,c
  2851  000D8E  D005               	goto	i2l1582
  2852  000D90                     i2l1580:
  2853  000D90  90D8               	bcf	status,0,c
  2854  000D92  360A               	rlcf	___lwmod@divisor,f,c
  2855  000D94  360B               	rlcf	___lwmod@divisor+1,f,c
  2856  000D96  2A0C               	incf	___lwmod@counter,f,c
  2857  000D98  D000               	goto	i2l1582
  2858  000D9A                     i2l1582:
  2859  000D9A  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2860  000D9C  D002               	goto	i2l1584
  2861  000D9E  D7F8               	goto	i2l1580
  2862  000DA0  D000               	goto	i2l1584
  2863  000DA2                     i2l1584:
  2864  000DA2  500A               	movf	___lwmod@divisor,w,c
  2865  000DA4  5C08               	subwf	___lwmod@dividend,w,c
  2866  000DA6  500B               	movf	___lwmod@divisor+1,w,c
  2867  000DA8  5809               	subwfb	___lwmod@dividend+1,w,c
  2868  000DAA  A0D8               	btfss	status,0,c
  2869  000DAC  D005               	goto	i2l1588
  2870  000DAE  500A               	movf	___lwmod@divisor,w,c
  2871  000DB0  5E08               	subwf	___lwmod@dividend,f,c
  2872  000DB2  500B               	movf	___lwmod@divisor+1,w,c
  2873  000DB4  5A09               	subwfb	___lwmod@dividend+1,f,c
  2874  000DB6  D000               	goto	i2l1588
  2875  000DB8                     i2l1588:
  2876  000DB8  90D8               	bcf	status,0,c
  2877  000DBA  320B               	rrcf	___lwmod@divisor+1,f,c
  2878  000DBC  320A               	rrcf	___lwmod@divisor,f,c
  2879  000DBE  2E0C               	decfsz	___lwmod@counter,f,c
  2880  000DC0  D7F0               	goto	i2l1584
  2881  000DC2  D000               	goto	i2l841
  2882  000DC4                     i2l841:
  2883  000DC4  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2884  000DC8  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2885  000DCC  0012               	return		;funcret
  2886  000DCE                     __end_of___lwmod:
  2887                           	opt stack 0
  2888                           pclatu	equ	0xFFB
  2889                           pclath	equ	0xFFA
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           prodh	equ	0xFF4
  2895                           prodl	equ	0xFF3
  2896                           intcon	equ	0xFF2
  2897                           intcon2	equ	0xFF1
  2898                           intcon3	equ	0xFF0
  2899                           postinc0	equ	0xFEE
  2900                           fsr0h	equ	0xFEA
  2901                           fsr0l	equ	0xFE9
  2902                           wreg	equ	0xFE8
  2903                           postdec1	equ	0xFE5
  2904                           fsr1h	equ	0xFE2
  2905                           fsr1l	equ	0xFE1
  2906                           indf2	equ	0xFDF
  2907                           postinc2	equ	0xFDE
  2908                           postdec2	equ	0xFDD
  2909                           fsr2h	equ	0xFDA
  2910                           fsr2l	equ	0xFD9
  2911                           status	equ	0xFD8
  2912                           
  2913 ;; *************** function ___lwdiv *****************
  2914 ;; Defined at:
  2915 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;  dividend        2    0[COMRAM] unsigned int 
  2918 ;;  divisor         2    2[COMRAM] unsigned int 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  quotient        2    4[COMRAM] unsigned int 
  2921 ;;  counter         1    6[COMRAM] unsigned char 
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  2    0[COMRAM] unsigned int 
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2931 ;;      Params:         4       0       0       0       0       0       0
  2932 ;;      Locals:         3       0       0       0       0       0       0
  2933 ;;      Temps:          0       0       0       0       0       0       0
  2934 ;;      Totals:         7       0       0       0       0       0       0
  2935 ;;Total ram usage:        7 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; This function calls:
  2938 ;;		Nothing
  2939 ;; This function is called by:
  2940 ;;		_sprintf
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text18
  2945  000C24                     __ptext18:
  2946                           	opt stack 0
  2947  000C24                     ___lwdiv:
  2948                           	opt stack 24
  2949                           
  2950                           ;incstack = 0
  2951  000C24  0E00               	movlw	0
  2952  000C26  6E06               	movwf	___lwdiv@quotient+1,c
  2953  000C28  0E00               	movlw	0
  2954  000C2A  6E05               	movwf	___lwdiv@quotient,c
  2955  000C2C  5003               	movf	___lwdiv@divisor,w,c
  2956  000C2E  1004               	iorwf	___lwdiv@divisor+1,w,c
  2957  000C30  B4D8               	btfsc	status,2,c
  2958  000C32  D021               	goto	i2l831
  2959  000C34  0E01               	movlw	1
  2960  000C36  6E07               	movwf	___lwdiv@counter,c
  2961  000C38  D005               	goto	i2l1562
  2962  000C3A                     i2l1560:
  2963  000C3A  90D8               	bcf	status,0,c
  2964  000C3C  3603               	rlcf	___lwdiv@divisor,f,c
  2965  000C3E  3604               	rlcf	___lwdiv@divisor+1,f,c
  2966  000C40  2A07               	incf	___lwdiv@counter,f,c
  2967  000C42  D000               	goto	i2l1562
  2968  000C44                     i2l1562:
  2969  000C44  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2970  000C46  D002               	goto	i2l1564
  2971  000C48  D7F8               	goto	i2l1560
  2972  000C4A  D000               	goto	i2l1564
  2973  000C4C                     i2l1564:
  2974  000C4C  90D8               	bcf	status,0,c
  2975  000C4E  3605               	rlcf	___lwdiv@quotient,f,c
  2976  000C50  3606               	rlcf	___lwdiv@quotient+1,f,c
  2977  000C52  5003               	movf	___lwdiv@divisor,w,c
  2978  000C54  5C01               	subwf	___lwdiv@dividend,w,c
  2979  000C56  5004               	movf	___lwdiv@divisor+1,w,c
  2980  000C58  5802               	subwfb	___lwdiv@dividend+1,w,c
  2981  000C5A  A0D8               	btfss	status,0,c
  2982  000C5C  D006               	goto	i2l1572
  2983  000C5E  5003               	movf	___lwdiv@divisor,w,c
  2984  000C60  5E01               	subwf	___lwdiv@dividend,f,c
  2985  000C62  5004               	movf	___lwdiv@divisor+1,w,c
  2986  000C64  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2987  000C66  8005               	bsf	___lwdiv@quotient,0,c
  2988  000C68  D000               	goto	i2l1572
  2989  000C6A                     i2l1572:
  2990  000C6A  90D8               	bcf	status,0,c
  2991  000C6C  3204               	rrcf	___lwdiv@divisor+1,f,c
  2992  000C6E  3203               	rrcf	___lwdiv@divisor,f,c
  2993  000C70  2E07               	decfsz	___lwdiv@counter,f,c
  2994  000C72  D7EC               	goto	i2l1564
  2995  000C74  D000               	goto	i2l831
  2996  000C76                     i2l831:
  2997  000C76  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2998  000C7A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2999  000C7E  0012               	return		;funcret
  3000  000C80                     __end_of___lwdiv:
  3001                           	opt stack 0
  3002                           pclatu	equ	0xFFB
  3003                           pclath	equ	0xFFA
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           prodh	equ	0xFF4
  3009                           prodl	equ	0xFF3
  3010                           intcon	equ	0xFF2
  3011                           intcon2	equ	0xFF1
  3012                           intcon3	equ	0xFF0
  3013                           postinc0	equ	0xFEE
  3014                           fsr0h	equ	0xFEA
  3015                           fsr0l	equ	0xFE9
  3016                           wreg	equ	0xFE8
  3017                           postdec1	equ	0xFE5
  3018                           fsr1h	equ	0xFE2
  3019                           fsr1l	equ	0xFE1
  3020                           indf2	equ	0xFDF
  3021                           postinc2	equ	0xFDE
  3022                           postdec2	equ	0xFDD
  3023                           fsr2h	equ	0xFDA
  3024                           fsr2l	equ	0xFD9
  3025                           status	equ	0xFD8
  3026                           
  3027 ;; *************** function _escreveLCD *****************
  3028 ;; Defined at:
  3029 ;;		line 74 in file "main.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  primeiraLinh    2    5[COMRAM] PTR unsigned char 
  3032 ;;		 -> STR_10(13), STR_8(14), STR_6(13), STR_5(14), 
  3033 ;;		 -> STR_4(13), STR_2(14), 
  3034 ;;  segundaLinha    2    7[COMRAM] PTR unsigned char 
  3035 ;;		 -> texto(5), 
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;		None
  3038 ;; Return value:  Size  Location     Type
  3039 ;;		None               void
  3040 ;; Registers used:
  3041 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3047 ;;      Params:         4       0       0       0       0       0       0
  3048 ;;      Locals:         0       0       0       0       0       0       0
  3049 ;;      Temps:          0       0       0       0       0       0       0
  3050 ;;      Totals:         4       0       0       0       0       0       0
  3051 ;;Total ram usage:        4 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:    3
  3054 ;; This function calls:
  3055 ;;		_putrsXLCD
  3056 ;;		i2_DelayPORXLCD
  3057 ;;		i2_WriteCmdXLCD
  3058 ;; This function is called by:
  3059 ;;		_cronoProgressivo
  3060 ;;		_cronoRegressivo
  3061 ;;		_interrupcao
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text19
  3066  000EC4                     __ptext19:
  3067                           	opt stack 0
  3068  000EC4                     _escreveLCD:
  3069                           	opt stack 22
  3070                           
  3071                           ;main.c: 76: WriteCmdXLCD(0x01);
  3072                           
  3073                           ;incstack = 0
  3074  000EC4  0E01               	movlw	1
  3075  000EC6  EC07  F007         	call	i2_WriteCmdXLCD
  3076                           
  3077                           ;main.c: 77: DelayPORXLCD();
  3078  000ECA  EC0F  F008         	call	i2_DelayPORXLCD	;wreg free
  3079                           
  3080                           ;main.c: 78: WriteCmdXLCD(0x80);
  3081  000ECE  0E80               	movlw	128
  3082  000ED0  EC07  F007         	call	i2_WriteCmdXLCD
  3083                           
  3084                           ;main.c: 79: putrsXLCD(primeiraLinha);
  3085  000ED4  C006  F004         	movff	escreveLCD@primeiraLinha,putrsXLCD@buffer
  3086  000ED8  C007  F005         	movff	escreveLCD@primeiraLinha+1,putrsXLCD@buffer+1
  3087  000EDC  ECE2  F005         	call	_putrsXLCD	;wreg free
  3088                           
  3089                           ;main.c: 80: WriteCmdXLCD(0xC0);
  3090  000EE0  0EC0               	movlw	192
  3091  000EE2  EC07  F007         	call	i2_WriteCmdXLCD
  3092                           
  3093                           ;main.c: 81: putrsXLCD(segundaLinha);
  3094  000EE6  C008  F004         	movff	escreveLCD@segundaLinha,putrsXLCD@buffer
  3095  000EEA  C009  F005         	movff	escreveLCD@segundaLinha+1,putrsXLCD@buffer+1
  3096  000EEE  ECE2  F005         	call	_putrsXLCD	;wreg free
  3097  000EF2  0012               	return		;funcret
  3098  000EF4                     __end_of_escreveLCD:
  3099                           	opt stack 0
  3100                           pclatu	equ	0xFFB
  3101                           pclath	equ	0xFFA
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           prodh	equ	0xFF4
  3107                           prodl	equ	0xFF3
  3108                           intcon	equ	0xFF2
  3109                           intcon2	equ	0xFF1
  3110                           intcon3	equ	0xFF0
  3111                           postinc0	equ	0xFEE
  3112                           fsr0h	equ	0xFEA
  3113                           fsr0l	equ	0xFE9
  3114                           wreg	equ	0xFE8
  3115                           postdec1	equ	0xFE5
  3116                           fsr1h	equ	0xFE2
  3117                           fsr1l	equ	0xFE1
  3118                           indf2	equ	0xFDF
  3119                           postinc2	equ	0xFDE
  3120                           postdec2	equ	0xFDD
  3121                           fsr2h	equ	0xFDA
  3122                           fsr2l	equ	0xFD9
  3123                           status	equ	0xFD8
  3124                           
  3125 ;; *************** function i2_WriteCmdXLCD *****************
  3126 ;; Defined at:
  3127 ;;		line 13 in file "plib/XLCD/wcmdxlcd.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  cmd             1    wreg     unsigned char 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  cmd             1    2[COMRAM] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;		None               void
  3134 ;; Registers used:
  3135 ;;		wreg, status,2, status,0, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3141 ;;      Params:         0       0       0       0       0       0       0
  3142 ;;      Locals:         1       0       0       0       0       0       0
  3143 ;;      Temps:          0       0       0       0       0       0       0
  3144 ;;      Totals:         1       0       0       0       0       0       0
  3145 ;;Total ram usage:        1 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    1
  3148 ;; This function calls:
  3149 ;;		i2_DelayFor18TCY
  3150 ;; This function is called by:
  3151 ;;		_escreveLCD
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text20
  3156  000E0E                     __ptext20:
  3157                           	opt stack 0
  3158  000E0E                     i2_WriteCmdXLCD:
  3159                           	opt stack 23
  3160                           
  3161                           ;incstack = 0
  3162                           ;i2WriteCmdXLCD@cmd stored from wreg
  3163  000E0E  6E03               	movwf	i2WriteCmdXLCD@cmd,c
  3164                           
  3165                           ;wcmdxlcd.c: 32: TRISD &= 0xf0;
  3166  000E10  0EF0               	movlw	240
  3167  000E12  1695               	andwf	3989,f,c	;volatile
  3168                           
  3169                           ;wcmdxlcd.c: 33: PORTD &= 0xf0;
  3170  000E14  0EF0               	movlw	240
  3171  000E16  1683               	andwf	3971,f,c	;volatile
  3172                           
  3173                           ;wcmdxlcd.c: 34: PORTD |= (unsigned)((cmd>>4)&0x0f);
  3174  000E18  3803               	swapf	i2WriteCmdXLCD@cmd,w,c
  3175  000E1A  0B0F               	andlw	15
  3176  000E1C  0B0F               	andlw	15
  3177  000E1E  1283               	iorwf	3971,f,c	;volatile
  3178                           
  3179                           ;wcmdxlcd.c: 36: LATCbits.LATC2 = 0;
  3180  000E20  948B               	bcf	3979,2,c	;volatile
  3181                           
  3182                           ;wcmdxlcd.c: 37: LATCbits.LATC0 = 0;
  3183  000E22  908B               	bcf	3979,0,c	;volatile
  3184                           
  3185                           ;wcmdxlcd.c: 38: DelayFor18TCY();
  3186  000E24  ECB7  F007         	call	i2_DelayFor18TCY	;wreg free
  3187                           
  3188                           ;wcmdxlcd.c: 39: LATCbits.LATC1 = 1;
  3189  000E28  828B               	bsf	3979,1,c	;volatile
  3190                           
  3191                           ;wcmdxlcd.c: 40: DelayFor18TCY();
  3192  000E2A  ECB7  F007         	call	i2_DelayFor18TCY	;wreg free
  3193                           
  3194                           ;wcmdxlcd.c: 41: LATCbits.LATC1 = 0;
  3195  000E2E  928B               	bcf	3979,1,c	;volatile
  3196                           
  3197                           ;wcmdxlcd.c: 46: PORTD &= 0xf0;
  3198  000E30  0EF0               	movlw	240
  3199  000E32  1683               	andwf	3971,f,c	;volatile
  3200                           
  3201                           ;wcmdxlcd.c: 47: PORTD |= (unsigned)(cmd&0x0f);
  3202  000E34  5003               	movf	i2WriteCmdXLCD@cmd,w,c
  3203  000E36  0B0F               	andlw	15
  3204  000E38  1283               	iorwf	3971,f,c	;volatile
  3205                           
  3206                           ;wcmdxlcd.c: 49: DelayFor18TCY();
  3207  000E3A  ECB7  F007         	call	i2_DelayFor18TCY	;wreg free
  3208                           
  3209                           ;wcmdxlcd.c: 50: LATCbits.LATC1 = 1;
  3210  000E3E  828B               	bsf	3979,1,c	;volatile
  3211                           
  3212                           ;wcmdxlcd.c: 51: DelayFor18TCY();
  3213  000E40  ECB7  F007         	call	i2_DelayFor18TCY	;wreg free
  3214                           
  3215                           ;wcmdxlcd.c: 52: LATCbits.LATC1 = 0;
  3216  000E44  928B               	bcf	3979,1,c	;volatile
  3217                           
  3218                           ;wcmdxlcd.c: 56: TRISD |= 0x0f;
  3219  000E46  0E0F               	movlw	15
  3220  000E48  1295               	iorwf	3989,f,c	;volatile
  3221  000E4A  D000               	goto	i2l124
  3222  000E4C                     i2l124:
  3223  000E4C  0012               	return		;funcret
  3224  000E4E                     __end_ofi2_WriteCmdXLCD:
  3225                           	opt stack 0
  3226                           pclatu	equ	0xFFB
  3227                           pclath	equ	0xFFA
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           tblptrl	equ	0xFF6
  3231                           tablat	equ	0xFF5
  3232                           prodh	equ	0xFF4
  3233                           prodl	equ	0xFF3
  3234                           intcon	equ	0xFF2
  3235                           intcon2	equ	0xFF1
  3236                           intcon3	equ	0xFF0
  3237                           postinc0	equ	0xFEE
  3238                           fsr0h	equ	0xFEA
  3239                           fsr0l	equ	0xFE9
  3240                           wreg	equ	0xFE8
  3241                           postdec1	equ	0xFE5
  3242                           fsr1h	equ	0xFE2
  3243                           fsr1l	equ	0xFE1
  3244                           indf2	equ	0xFDF
  3245                           postinc2	equ	0xFDE
  3246                           postdec2	equ	0xFDD
  3247                           fsr2h	equ	0xFDA
  3248                           fsr2l	equ	0xFD9
  3249                           status	equ	0xFD8
  3250                           
  3251 ;; *************** function i2_DelayPORXLCD *****************
  3252 ;; Defined at:
  3253 ;;		line 52 in file "main.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;		None
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;		None
  3258 ;; Return value:  Size  Location     Type
  3259 ;;		None               void
  3260 ;; Registers used:
  3261 ;;		wreg
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3267 ;;      Params:         0       0       0       0       0       0       0
  3268 ;;      Locals:         0       0       0       0       0       0       0
  3269 ;;      Temps:          1       0       0       0       0       0       0
  3270 ;;      Totals:         1       0       0       0       0       0       0
  3271 ;;Total ram usage:        1 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; This function calls:
  3274 ;;		Nothing
  3275 ;; This function is called by:
  3276 ;;		_escreveLCD
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text21
  3281  00101E                     __ptext21:
  3282                           	opt stack 0
  3283  00101E                     i2_DelayPORXLCD:
  3284                           	opt stack 24
  3285                           
  3286                           ;main.c: 53: _delay((unsigned long)((15)*(20000000/4000.0)));
  3287                           
  3288                           ;incstack = 0
  3289  00101E  0E62               	movlw	98
  3290  001020  6E01               	movwf	??i2_DelayPORXLCD& (0+255),c
  3291  001022  0E66               	movlw	102
  3292  001024                     i2u115_47:
  3293  001024  2EE8               	decfsz	wreg,f,c
  3294  001026  D7FE               	goto	i2u115_47
  3295  001028  2E01               	decfsz	??i2_DelayPORXLCD& (0+255),f,c
  3296  00102A  D7FC               	goto	i2u115_47
  3297  00102C  0012               	return		;funcret
  3298  00102E                     __end_ofi2_DelayPORXLCD:
  3299                           	opt stack 0
  3300                           pclatu	equ	0xFFB
  3301                           pclath	equ	0xFFA
  3302                           tblptru	equ	0xFF8
  3303                           tblptrh	equ	0xFF7
  3304                           tblptrl	equ	0xFF6
  3305                           tablat	equ	0xFF5
  3306                           prodh	equ	0xFF4
  3307                           prodl	equ	0xFF3
  3308                           intcon	equ	0xFF2
  3309                           intcon2	equ	0xFF1
  3310                           intcon3	equ	0xFF0
  3311                           postinc0	equ	0xFEE
  3312                           fsr0h	equ	0xFEA
  3313                           fsr0l	equ	0xFE9
  3314                           wreg	equ	0xFE8
  3315                           postdec1	equ	0xFE5
  3316                           fsr1h	equ	0xFE2
  3317                           fsr1l	equ	0xFE1
  3318                           indf2	equ	0xFDF
  3319                           postinc2	equ	0xFDE
  3320                           postdec2	equ	0xFDD
  3321                           fsr2h	equ	0xFDA
  3322                           fsr2l	equ	0xFD9
  3323                           status	equ	0xFD8
  3324                           
  3325 ;; *************** function _putrsXLCD *****************
  3326 ;; Defined at:
  3327 ;;		line 16 in file "plib/XLCD/putrxlcd.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  buffer          2    3[COMRAM] PTR const unsigned char 
  3330 ;;		 -> STR_10(13), STR_8(14), STR_6(13), STR_5(14), 
  3331 ;;		 -> STR_4(13), STR_2(14), texto(5), 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;		None               void
  3336 ;; Registers used:
  3337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3343 ;;      Params:         2       0       0       0       0       0       0
  3344 ;;      Locals:         0       0       0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0
  3346 ;;      Totals:         2       0       0       0       0       0       0
  3347 ;;Total ram usage:        2 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    2
  3350 ;; This function calls:
  3351 ;;		_WriteDataXLCD
  3352 ;;		i2_BusyXLCD
  3353 ;; This function is called by:
  3354 ;;		_escreveLCD
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text22
  3359  000BC4                     __ptext22:
  3360                           	opt stack 0
  3361  000BC4                     _putrsXLCD:
  3362                           	opt stack 22
  3363                           
  3364                           ;putrxlcd.c: 18: while(*buffer)
  3365                           
  3366                           ;incstack = 0
  3367  000BC4  D01B               	goto	i2l1534
  3368                           
  3369                           ;putrxlcd.c: 19: {
  3370                           ;putrxlcd.c: 20: while(BusyXLCD());
  3371  000BC6  D000               	goto	i2l1528
  3372  000BC8                     i2l1528:
  3373  000BC8  EC1E  F008         	call	i2_BusyXLCD	;wreg free
  3374  000BCC  0900               	iorlw	0
  3375  000BCE  A4D8               	btfss	status,2,c
  3376  000BD0  D7FB               	goto	i2l1528
  3377                           
  3378                           ;putrxlcd.c: 21: WriteDataXLCD(*buffer);
  3379  000BD2  C004  FFF6         	movff	putrsXLCD@buffer,tblptrl
  3380  000BD6  C005  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  3381  000BDA  6AF8               	clrf	tblptru,c
  3382  000BDC  0E05               	movlw	(high __ramtop+-1)
  3383  000BDE  64F7               	cpfsgt	tblptrh,c
  3384  000BE0  D003               	bra	i2u65_47
  3385  000BE2  0008               	tblrd		*
  3386  000BE4  50F5               	movf	tablat,w,c
  3387  000BE6  D005               	bra	i2u65_40
  3388  000BE8                     i2u65_47:
  3389  000BE8  CFF6 FFE9          	movff	tblptrl,fsr0l
  3390  000BEC  CFF7 FFEA          	movff	tblptrh,fsr0h
  3391  000BF0  50EF               	movf	indf0,w,c
  3392  000BF2                     i2u65_40:
  3393  000BF2  EC27  F007         	call	_WriteDataXLCD
  3394                           
  3395                           ;putrxlcd.c: 22: buffer++;
  3396  000BF6  4A04               	infsnz	putrsXLCD@buffer,f,c
  3397  000BF8  2A05               	incf	putrsXLCD@buffer+1,f,c
  3398  000BFA  D000               	goto	i2l1534
  3399  000BFC                     i2l1534:
  3400  000BFC  C004  FFF6         	movff	putrsXLCD@buffer,tblptrl
  3401  000C00  C005  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  3402  000C04  6AF8               	clrf	tblptru,c
  3403  000C06  0E05               	movlw	(high __ramtop+-1)
  3404  000C08  64F7               	cpfsgt	tblptrh,c
  3405  000C0A  D003               	bra	i2u66_47
  3406  000C0C  0008               	tblrd		*
  3407  000C0E  50F5               	movf	tablat,w,c
  3408  000C10  D005               	bra	i2u66_40
  3409  000C12                     i2u66_47:
  3410  000C12  CFF6 FFE9          	movff	tblptrl,fsr0l
  3411  000C16  CFF7 FFEA          	movff	tblptrh,fsr0h
  3412  000C1A  50EF               	movf	indf0,w,c
  3413  000C1C                     i2u66_40:
  3414  000C1C  0900               	iorlw	0
  3415  000C1E  A4D8               	btfss	status,2,c
  3416  000C20  D7D3               	goto	i2l1528
  3417                           
  3418                           ;putrxlcd.c: 23: }
  3419                           ;putrxlcd.c: 24: return;
  3420  000C22  0012               	return		;funcret
  3421  000C24                     __end_of_putrsXLCD:
  3422                           	opt stack 0
  3423                           pclatu	equ	0xFFB
  3424                           pclath	equ	0xFFA
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           intcon	equ	0xFF2
  3432                           intcon2	equ	0xFF1
  3433                           intcon3	equ	0xFF0
  3434                           indf0	equ	0xFEF
  3435                           postinc0	equ	0xFEE
  3436                           fsr0h	equ	0xFEA
  3437                           fsr0l	equ	0xFE9
  3438                           wreg	equ	0xFE8
  3439                           postdec1	equ	0xFE5
  3440                           fsr1h	equ	0xFE2
  3441                           fsr1l	equ	0xFE1
  3442                           indf2	equ	0xFDF
  3443                           postinc2	equ	0xFDE
  3444                           postdec2	equ	0xFDD
  3445                           fsr2h	equ	0xFDA
  3446                           fsr2l	equ	0xFD9
  3447                           status	equ	0xFD8
  3448                           
  3449 ;; *************** function i2_BusyXLCD *****************
  3450 ;; Defined at:
  3451 ;;		line 12 in file "plib/XLCD/busyxlcd.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;		None
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;		None
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      unsigned char 
  3458 ;; Registers used:
  3459 ;;		wreg
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3465 ;;      Params:         0       0       0       0       0       0       0
  3466 ;;      Locals:         0       0       0       0       0       0       0
  3467 ;;      Temps:          0       0       0       0       0       0       0
  3468 ;;      Totals:         0       0       0       0       0       0       0
  3469 ;;Total ram usage:        0 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; This function calls:
  3472 ;;		Nothing
  3473 ;; This function is called by:
  3474 ;;		_putrsXLCD
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text23
  3479  00103C                     __ptext23:
  3480                           	opt stack 0
  3481  00103C                     i2_BusyXLCD:
  3482                           	opt stack 23
  3483                           
  3484                           ;busyxlcd.c: 15: _delay((unsigned long)((10)*(20000000/4000000.0)));
  3485                           
  3486                           ;incstack = 0
  3487  00103C  0E10               	movlw	16
  3488  00103E                     i2u116_47:
  3489  00103E  2EE8               	decfsz	wreg,f,c
  3490  001040  D7FE               	goto	i2u116_47
  3491  001042  D000               	nop2		;nop
  3492                           
  3493                           ;busyxlcd.c: 16: return 0;
  3494  001044  0E00               	movlw	0
  3495  001046  D000               	goto	i2l5
  3496  001048                     i2l5:
  3497  001048  0012               	return		;funcret
  3498  00104A                     __end_ofi2_BusyXLCD:
  3499                           	opt stack 0
  3500                           pclatu	equ	0xFFB
  3501                           pclath	equ	0xFFA
  3502                           tblptru	equ	0xFF8
  3503                           tblptrh	equ	0xFF7
  3504                           tblptrl	equ	0xFF6
  3505                           tablat	equ	0xFF5
  3506                           prodh	equ	0xFF4
  3507                           prodl	equ	0xFF3
  3508                           intcon	equ	0xFF2
  3509                           intcon2	equ	0xFF1
  3510                           intcon3	equ	0xFF0
  3511                           indf0	equ	0xFEF
  3512                           postinc0	equ	0xFEE
  3513                           fsr0h	equ	0xFEA
  3514                           fsr0l	equ	0xFE9
  3515                           wreg	equ	0xFE8
  3516                           postdec1	equ	0xFE5
  3517                           fsr1h	equ	0xFE2
  3518                           fsr1l	equ	0xFE1
  3519                           indf2	equ	0xFDF
  3520                           postinc2	equ	0xFDE
  3521                           postdec2	equ	0xFDD
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _WriteDataXLCD *****************
  3527 ;; Defined at:
  3528 ;;		line 16 in file "plib/XLCD/writdata.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  data            1    wreg     unsigned char 
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;  data            1    2[COMRAM] unsigned char 
  3533 ;; Return value:  Size  Location     Type
  3534 ;;		None               void
  3535 ;; Registers used:
  3536 ;;		wreg, status,2, status,0, cstack
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3542 ;;      Params:         0       0       0       0       0       0       0
  3543 ;;      Locals:         1       0       0       0       0       0       0
  3544 ;;      Temps:          0       0       0       0       0       0       0
  3545 ;;      Totals:         1       0       0       0       0       0       0
  3546 ;;Total ram usage:        1 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:    1
  3549 ;; This function calls:
  3550 ;;		i2_DelayFor18TCY
  3551 ;; This function is called by:
  3552 ;;		_putrsXLCD
  3553 ;;		_putsXLCD
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text24
  3558  000E4E                     __ptext24:
  3559                           	opt stack 0
  3560  000E4E                     _WriteDataXLCD:
  3561                           	opt stack 22
  3562                           
  3563                           ;incstack = 0
  3564                           ;WriteDataXLCD@data stored from wreg
  3565  000E4E  6E03               	movwf	WriteDataXLCD@data,c
  3566                           
  3567                           ;writdata.c: 35: TRISD &= 0xf0;
  3568  000E50  0EF0               	movlw	240
  3569  000E52  1695               	andwf	3989,f,c	;volatile
  3570                           
  3571                           ;writdata.c: 36: PORTD &= 0xf0;
  3572  000E54  0EF0               	movlw	240
  3573  000E56  1683               	andwf	3971,f,c	;volatile
  3574                           
  3575                           ;writdata.c: 37: PORTD |= (unsigned)(((data>>4)&0x0f));
  3576  000E58  3803               	swapf	WriteDataXLCD@data,w,c
  3577  000E5A  0B0F               	andlw	15
  3578  000E5C  0B0F               	andlw	15
  3579  000E5E  1283               	iorwf	3971,f,c	;volatile
  3580                           
  3581                           ;writdata.c: 39: LATCbits.LATC0 = 1;
  3582  000E60  808B               	bsf	3979,0,c	;volatile
  3583                           
  3584                           ;writdata.c: 40: LATCbits.LATC2 = 0;
  3585  000E62  948B               	bcf	3979,2,c	;volatile
  3586                           
  3587                           ;writdata.c: 41: DelayFor18TCY();
  3588  000E64  ECB7  F007         	call	i2_DelayFor18TCY	;wreg free
  3589                           
  3590                           ;writdata.c: 42: LATCbits.LATC1 = 1;
  3591  000E68  828B               	bsf	3979,1,c	;volatile
  3592                           
  3593                           ;writdata.c: 43: DelayFor18TCY();
  3594  000E6A  ECB7  F007         	call	i2_DelayFor18TCY	;wreg free
  3595                           
  3596                           ;writdata.c: 44: LATCbits.LATC1 = 0;
  3597  000E6E  928B               	bcf	3979,1,c	;volatile
  3598                           
  3599                           ;writdata.c: 49: PORTD &= 0xf0;
  3600  000E70  0EF0               	movlw	240
  3601  000E72  1683               	andwf	3971,f,c	;volatile
  3602                           
  3603                           ;writdata.c: 50: PORTD |= (unsigned)((data&0x0f));
  3604  000E74  5003               	movf	WriteDataXLCD@data,w,c
  3605  000E76  0B0F               	andlw	15
  3606  000E78  1283               	iorwf	3971,f,c	;volatile
  3607                           
  3608                           ;writdata.c: 52: DelayFor18TCY();
  3609  000E7A  ECB7  F007         	call	i2_DelayFor18TCY	;wreg free
  3610                           
  3611                           ;writdata.c: 53: LATCbits.LATC1 = 1;
  3612  000E7E  828B               	bsf	3979,1,c	;volatile
  3613                           
  3614                           ;writdata.c: 54: DelayFor18TCY();
  3615  000E80  ECB7  F007         	call	i2_DelayFor18TCY	;wreg free
  3616                           
  3617                           ;writdata.c: 55: LATCbits.LATC1 = 0;
  3618  000E84  928B               	bcf	3979,1,c	;volatile
  3619                           
  3620                           ;writdata.c: 59: TRISD |= 0x0f;
  3621  000E86  0E0F               	movlw	15
  3622  000E88  1295               	iorwf	3989,f,c	;volatile
  3623  000E8A  D000               	goto	i2l135
  3624  000E8C                     i2l135:
  3625  000E8C  0012               	return		;funcret
  3626  000E8E                     __end_of_WriteDataXLCD:
  3627                           	opt stack 0
  3628                           pclatu	equ	0xFFB
  3629                           pclath	equ	0xFFA
  3630                           tblptru	equ	0xFF8
  3631                           tblptrh	equ	0xFF7
  3632                           tblptrl	equ	0xFF6
  3633                           tablat	equ	0xFF5
  3634                           prodh	equ	0xFF4
  3635                           prodl	equ	0xFF3
  3636                           intcon	equ	0xFF2
  3637                           intcon2	equ	0xFF1
  3638                           intcon3	equ	0xFF0
  3639                           indf0	equ	0xFEF
  3640                           postinc0	equ	0xFEE
  3641                           fsr0h	equ	0xFEA
  3642                           fsr0l	equ	0xFE9
  3643                           wreg	equ	0xFE8
  3644                           postdec1	equ	0xFE5
  3645                           fsr1h	equ	0xFE2
  3646                           fsr1l	equ	0xFE1
  3647                           indf2	equ	0xFDF
  3648                           postinc2	equ	0xFDE
  3649                           postdec2	equ	0xFDD
  3650                           fsr2h	equ	0xFDA
  3651                           fsr2l	equ	0xFD9
  3652                           status	equ	0xFD8
  3653                           
  3654 ;; *************** function i2_DelayFor18TCY *****************
  3655 ;; Defined at:
  3656 ;;		line 44 in file "main.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  DelayFor18TC    2    0[COMRAM] int 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;		None               void
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3670 ;;      Params:         0       0       0       0       0       0       0
  3671 ;;      Locals:         2       0       0       0       0       0       0
  3672 ;;      Temps:          0       0       0       0       0       0       0
  3673 ;;      Totals:         2       0       0       0       0       0       0
  3674 ;;Total ram usage:        2 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_WriteDataXLCD
  3680 ;;		i2_WriteCmdXLCD
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           	psect	text25
  3685  000F6E                     __ptext25:
  3686                           	opt stack 0
  3687  000F6E                     i2_DelayFor18TCY:
  3688                           	opt stack 23
  3689                           
  3690                           ;main.c: 45: for (int i = 0; i < 18; i++)
  3691                           
  3692                           ;incstack = 0
  3693  000F6E  0E00               	movlw	0
  3694  000F70  6E02               	movwf	i2DelayFor18TCY@i+1,c
  3695  000F72  0E00               	movlw	0
  3696  000F74  6E01               	movwf	i2DelayFor18TCY@i,c
  3697  000F76                     i2l1494:
  3698  000F76  BE02               	btfsc	i2DelayFor18TCY@i+1,7,c
  3699  000F78  D008               	goto	i2l1498
  3700  000F7A  5002               	movf	i2DelayFor18TCY@i+1,w,c
  3701  000F7C  E10A               	bnz	i2l199
  3702  000F7E  0E12               	movlw	18
  3703  000F80  5C01               	subwf	i2DelayFor18TCY@i,w,c
  3704  000F82  B0D8               	btfsc	status,0,c
  3705  000F84  D006               	goto	i2l199
  3706  000F86  D001               	goto	i2l1498
  3707  000F88  D004               	goto	i2l199
  3708  000F8A                     i2l1498:
  3709  000F8A  4A01               	infsnz	i2DelayFor18TCY@i,f,c
  3710  000F8C  2A02               	incf	i2DelayFor18TCY@i+1,f,c
  3711  000F8E  D7F3               	goto	i2l1494
  3712  000F90  D000               	goto	i2l199
  3713  000F92                     i2l199:
  3714  000F92  0012               	return		;funcret
  3715  000F94                     __end_ofi2_DelayFor18TCY:
  3716                           	opt stack 0
  3717                           pclatu	equ	0xFFB
  3718                           pclath	equ	0xFFA
  3719                           tblptru	equ	0xFF8
  3720                           tblptrh	equ	0xFF7
  3721                           tblptrl	equ	0xFF6
  3722                           tablat	equ	0xFF5
  3723                           prodh	equ	0xFF4
  3724                           prodl	equ	0xFF3
  3725                           intcon	equ	0xFF2
  3726                           intcon2	equ	0xFF1
  3727                           intcon3	equ	0xFF0
  3728                           indf0	equ	0xFEF
  3729                           postinc0	equ	0xFEE
  3730                           fsr0h	equ	0xFEA
  3731                           fsr0l	equ	0xFE9
  3732                           wreg	equ	0xFE8
  3733                           postdec1	equ	0xFE5
  3734                           fsr1h	equ	0xFE2
  3735                           fsr1l	equ	0xFE1
  3736                           indf2	equ	0xFDF
  3737                           postinc2	equ	0xFDE
  3738                           postdec2	equ	0xFDD
  3739                           fsr2h	equ	0xFDA
  3740                           fsr2l	equ	0xFD9
  3741                           status	equ	0xFD8
  3742                           pclatu	equ	0xFFB
  3743                           pclath	equ	0xFFA
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           intcon	equ	0xFF2
  3751                           intcon2	equ	0xFF1
  3752                           intcon3	equ	0xFF0
  3753                           indf0	equ	0xFEF
  3754                           postinc0	equ	0xFEE
  3755                           fsr0h	equ	0xFEA
  3756                           fsr0l	equ	0xFE9
  3757                           wreg	equ	0xFE8
  3758                           postdec1	equ	0xFE5
  3759                           fsr1h	equ	0xFE2
  3760                           fsr1l	equ	0xFE1
  3761                           indf2	equ	0xFDF
  3762                           postinc2	equ	0xFDE
  3763                           postdec2	equ	0xFDD
  3764                           fsr2h	equ	0xFDA
  3765                           fsr2l	equ	0xFD9
  3766                           status	equ	0xFD8
  3767                           
  3768                           	psect	rparam
  3769  0000                     pclatu	equ	0xFFB
  3770                           pclath	equ	0xFFA
  3771                           tblptru	equ	0xFF8
  3772                           tblptrh	equ	0xFF7
  3773                           tblptrl	equ	0xFF6
  3774                           tablat	equ	0xFF5
  3775                           prodh	equ	0xFF4
  3776                           prodl	equ	0xFF3
  3777                           intcon	equ	0xFF2
  3778                           intcon2	equ	0xFF1
  3779                           intcon3	equ	0xFF0
  3780                           indf0	equ	0xFEF
  3781                           postinc0	equ	0xFEE
  3782                           fsr0h	equ	0xFEA
  3783                           fsr0l	equ	0xFE9
  3784                           wreg	equ	0xFE8
  3785                           postdec1	equ	0xFE5
  3786                           fsr1h	equ	0xFE2
  3787                           fsr1l	equ	0xFE1
  3788                           indf2	equ	0xFDF
  3789                           postinc2	equ	0xFDE
  3790                           postdec2	equ	0xFDD
  3791                           fsr2h	equ	0xFDA
  3792                           fsr2l	equ	0xFD9
  3793                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    10
    Data        9
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     54      79
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_9(CODE[10]), STR_7(CODE[10]), STR_3(CODE[10]), STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 5
		 -> texto(COMRAM[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    escreveLCD@segundaLinha	PTR unsigned char  size(2) Largest target is 5
		 -> texto(COMRAM[5]), 

    escreveLCD@primeiraLinha	PTR unsigned char  size(2) Largest target is 14
		 -> STR_10(CODE[13]), STR_8(CODE[14]), STR_6(CODE[13]), STR_5(CODE[14]), 
		 -> STR_4(CODE[13]), STR_2(CODE[14]), 

    putrsXLCD@buffer	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_10(CODE[13]), STR_8(CODE[14]), STR_6(CODE[13]), STR_5(CODE[14]), 
		 -> STR_4(CODE[13]), STR_2(CODE[14]), texto(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _inicializeLCD->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _WriteCmdXLCD->_DelayFor18TCY
    _SetDDRamAddr->_DelayFor18TCY

Critical Paths under _interrupcao in COMRAM

    _interrupcao->_sprintf
    _cronoRegressivo->_sprintf
    _cronoProgressivo->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _escreveLCD->_putrsXLCD
    i2_WriteCmdXLCD->i2_DelayFor18TCY
    _putrsXLCD->_WriteDataXLCD
    _WriteDataXLCD->i2_DelayFor18TCY

Critical Paths under _main in BANK0

    None.

Critical Paths under _interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupcao in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcao in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupcao in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupcao in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupcao in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     210
                          _configPic
                      _inicializeLCD
 ---------------------------------------------------------------------------------
 (1) _inicializeLCD                                        0     0      0     210
                           _BusyXLCD
                          _DelayXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     150
                                             53 COMRAM     1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdXLCD                                         1     1      0      60
                                             49 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      60
                                             49 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        2     2      0      30
                                             47 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         1     1      0       0
                                             47 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      15
                                             47 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DelayXLCD                                            1     1      0       0
                                             47 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _configPic                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interrupcao                                         14    14      0    9627
                                             33 COMRAM    14    14      0
                   _cronoProgressivo
                    _cronoRegressivo
                         _escreveLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _cronoRegressivo                                      0     0      0    3209
                         _escreveLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _cronoProgressivo                                     0     0      0    3209
                         _escreveLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             30    22      8    2198
                                             12 COMRAM    21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     265
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     265
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     268
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _escreveLCD                                           4     0      4    1011
                                              5 COMRAM     4     0      4
                          _putrsXLCD
                     i2_DelayPORXLCD
                     i2_WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (7) i2_WriteCmdXLCD                                       1     1      0      90
                                              2 COMRAM     1     1      0
                    i2_DelayFor18TCY
 ---------------------------------------------------------------------------------
 (7) i2_DelayPORXLCD                                       1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _putrsXLCD                                            2     0      2     241
                                              3 COMRAM     2     0      2
                      _WriteDataXLCD
                         i2_BusyXLCD
 ---------------------------------------------------------------------------------
 (8) i2_BusyXLCD                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _WriteDataXLCD                                        1     1      0      90
                                              2 COMRAM     1     1      0
                    i2_DelayFor18TCY
 ---------------------------------------------------------------------------------
 (8) i2_DelayFor18TCY                                      2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configPic
   _inicializeLCD
     _BusyXLCD
     _DelayXLCD
     _OpenXLCD
       _BusyXLCD
       _Delay10KTCYx
       _DelayPORXLCD
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY

 _interrupcao (ROOT)
   _cronoProgressivo
     _escreveLCD
       _putrsXLCD
         _WriteDataXLCD
           i2_DelayFor18TCY
         i2_BusyXLCD
       i2_DelayPORXLCD
       i2_WriteCmdXLCD
         i2_DelayFor18TCY
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _cronoRegressivo
     _escreveLCD
       _putrsXLCD
         _WriteDataXLCD
           i2_DelayFor18TCY
         i2_BusyXLCD
       i2_DelayPORXLCD
       i2_WriteCmdXLCD
         i2_DelayFor18TCY
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _escreveLCD
     _putrsXLCD
       _WriteDataXLCD
         i2_DelayFor18TCY
       i2_BusyXLCD
     i2_DelayPORXLCD
     i2_WriteCmdXLCD
       i2_DelayFor18TCY
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     36      4F       1       62.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4F      15        0.0%
DATA                 0      0      4F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Jul 07 15:30:59 2017

         i2DelayFor18TCY@i 0001                          l5 103A   __size_of_cronoRegressivo 0058  
                       l47 0BC2                         u55 0D44        ___wmul@multiplicand 0003  
              __CFG_OSC$HS 000000                        l113 0D80                        l124 0E0C  
                      l245 0FF6                        l526 0FE6                        l199 0F6C  
                      l940 0F64                        l936 0F50                        l978 0FD2  
                      i2l5 1048                        _min 003F                        _seg 0045  
    __size_of_WriteCmdXLCD 0040                        wreg 000FE8               __CFG_LVP$OFF 000000  
                     l1130 0B68                       l1124 0B48                       l1142 0B9E  
                     l1134 0B7A                       l1126 0B56                       l1302 0F0E  
                     l1146 0BB0                       l1138 0B8C                       STR_1 0626  
                     STR_2 060B                       STR_3 0626                       STR_4 0619  
                     STR_5 060B                       STR_6 0619                       STR_7 0626  
                     STR_8 060B                       STR_9 0626                       u1117 1014  
                     u1127 0FD8                       u1137 1030                       u1147 1002  
                     _main 0FE8                       fsr0h 000FEA                       fsr1h 000FE2  
                     indf0 000FEF                       fsr0l 000FE9                       fsr2h 000FDA  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
                     pclat 000FFA     __size_of_WriteDataXLCD 0040                       prodh 000FF4  
                     prodl 000FF3                       start 0018               ___param_bank 000010  
             _WriteCmdXLCD 0DCE           ?i2_DelayFor18TCY 0001              ?_SetDDRamAddr 0001  
                    ?_main 0001                      STR_10 0619                      _T0CON 000FD5  
  __size_ofi2_WriteCmdXLCD 0040            __end_of___lwdiv 0C80     __size_of_inicializeLCD 002C  
          __end_of___lwmod 0DCE                      i2l124 0E4C                      i2l301 0F46  
                    i2l230 09AC                      i2l135 0E8C                      i2l241 0AD4  
                    i2l225 0978                      i2l226 0964                      i2l229 09C0  
                    i2l199 0F92                      i2l298 0900                      i2l831 0C76  
                    i2l841 0DC4                      i2l739 0FB4                      _TMR0L 000FD6  
                    _PORTD 000F83                      _PORTE 000F84                      _TRISB 000F93  
                    _TRISD 000F95                      _TRISE 000F96      __size_of_Delay10KTCYx 0018  
          __end_of_dpowers 060B            __end_of_isdigit 0FB6                      _texto 004B  
              ?i2_BusyXLCD 0001                      tablat 000FF5                      status 000FD8  
          __end_of_sprintf 0902            __initialization 0E8E   __end_of_cronoProgressivo 0D2E  
             ?_interrupcao 0001               __end_of_main 0FFC           __end_of_BusyXLCD 103C  
       __size_of_DelayXLCD 0012               _Delay10KTCYx 0FD0      __size_of_DelayPORXLCD 0010  
           ??_SetDDRamAddr 0032           __end_of_OpenXLCD 0BC4                     ??_main 0037  
            __activetblptr 000002              _WriteDataXLCD 0E4E          ??_cronoRegressivo 0022  
           DelayFor18TCY@i 0030                     i2l1534 0BFC                     i2l1630 063C  
                   i2l1528 0BC8                     i2l1560 0C3A                     i2l1544 0FAC  
                   i2l1720 0852                     i2l1704 07FE                     i2l1712 0828  
                   i2l1562 0C44                     i2l1714 0830                     i2l1706 0806  
                   i2l1642 066E                     i2l1572 0C6A                     i2l1564 0C4C  
                   i2l1580 0D90                     i2l1660 0730                     i2l1644 0684  
                   i2l1636 0656                     i2l1494 0F76                     i2l1582 0D9A  
                   i2l1734 08CA                     i2l1726 0870                     i2l1670 075A  
                   i2l1638 0664                     i2l1750 0CF4                     i2l1822 09FC  
                   i2l1584 0DA2                     i2l1728 0876                     i2l1680 078E  
                   i2l1672 075E                     i2l1648 06A2                     i2l1736 08D6  
                   i2l1498 0F8A                     i2l1690 07AE                     i2l1738 08F2  
                   i2l1658 070A                     i2l1762 0C9E                     i2l1834 0A68  
                   i2l1818 09EE                     i2l1588 0DB8                     i2l1684 0792  
                   i2l1676 076A                     i2l1694 07D2                     i2l1696 07DC  
            _inicializeLCD 0EF4               _DelayPORXLCD 100E                     ___wmul 0F20  
  __size_ofi2_DelayPORXLCD 0010                  ??___lwdiv 0005                  ??___lwmod 000C  
                   _minReg 0047                     _segReg 0049                     clear_0 0E94  
      __size_ofi2_BusyXLCD 000E             ?_WriteDataXLCD 0001               __pdataCOMRAM 0047  
                ??_isdigit 0001               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_sprintf 0015  
        __end_of_DelayXLCD 100E                 __accesstop 0080    __end_of__initialization 0EBA  
           ?_inicializeLCD 0001            __CFG_PBADEN$OFF 000000              ___rparam_used 000001  
           __pcstackCOMRAM 0001             i2_WriteCmdXLCD 0E0E         __size_of_configPic 001A  
   __size_of_DelayFor18TCY 0026               sprintf@width 001F                  ?_BusyXLCD 0001  
          WriteCmdXLCD@cmd 0032       __end_of_SetDDRamAddr 0D82                  ?_OpenXLCD 0001  
        WriteDataXLCD@data 0003                    ?___wmul 0001       __size_of_interrupcao 0B06  
   __end_ofi2_WriteCmdXLCD 0E4E            ??_WriteDataXLCD 0003                    i2u65_40 0BF2  
                  i2u65_47 0BE8                    i2u66_40 0C1C                    i2u66_47 0C12  
          ??_inicializeLCD 0037               ??i2_BusyXLCD 0001         __size_of_putrsXLCD 0060  
               ??_BusyXLCD 0030                 _escreveLCD 0EC4                 ??_OpenXLCD 0036  
                  __Hparam 0000                    __Lparam 0000          __end_of_configPic 0FD0  
          _cronoRegressivo 0C80             i2_DelayPORXLCD 101E          ?_cronoProgressivo 0001  
            _DelayFor18TCY 0F48            __size_of___wmul 0028                    ___lwdiv 0C24  
                  ___lwmod 0D82               __psmallconst 0600         ??_cronoProgressivo 0022  
          ?i2_WriteCmdXLCD 0001                    __pcinit 0E8E            putrsXLCD@buffer 0004  
                  __ramtop 0600                    __ptext0 0FE8                    __ptext1 0EF4  
                  __ptext2 0B0E                    __ptext3 0DCE                    __ptext4 0D2E  
                  __ptext5 0F48                    __ptext6 100E                    __ptext7 0FD0  
                  __ptext8 102E                    __ptext9 0FFC         __end_ofi2_BusyXLCD 104A  
                  _dpowers 0601                    _isdigit 0F94   __size_ofi2_DelayFor18TCY 0026  
                  _sprintf 0632             __pintcode_body 0902       end_of_initialization 0EBA  
            __Lmediumconst 0000                    int_func 0902     __end_ofi2_DelayPORXLCD 102E  
           ?_DelayFor18TCY 0001                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE          __end_of_putrsXLCD 0C24  
                _PORTBbits 000F81                  _PORTEbits 000F84                  _TRISCbits 000F94  
    __size_of_SetDDRamAddr 0054    __end_of_cronoRegressivo 0CD8                ?_escreveLCD 0006  
                _DelayXLCD 0FFC            ?i2_DelayPORXLCD 0001             __end_of___wmul 0F48  
            __pidataCOMRAM 104A               _SetDDRamAddr 0D2E         SetDDRamAddr@DDaddr 0035  
      start_initialization 0E8E          ??i2_DelayFor18TCY 0001          __size_of_BusyXLCD 000E  
               ?_DelayXLCD 0001            ??_DelayFor18TCY 0030          __size_of_OpenXLCD 00B6  
                 ??___wmul 0005              ?_WriteCmdXLCD 0001        __size_of_escreveLCD 0030  
              __pbssCOMRAM 0037               _isdigit$1332 0002                sprintf@flag 001E  
              sprintf@prec 001B           ?_cronoRegressivo 0001           ___lwdiv@dividend 0001  
         ??i2_WriteCmdXLCD 0003              ??_interrupcao 0022                  __pintcode 0008  
           ??_WriteCmdXLCD 0032              ?_Delay10KTCYx 0001                   ?___lwdiv 0001  
                 ?___lwmod 0008                  _contBlink 0037                  _configPic 0FB6  
                _contTempo 0039      __end_of_WriteDataXLCD 0E8E                __smallconst 0600  
                 ?_isdigit 0001                  _cronoProg 003B  __size_of_cronoProgressivo 0056  
         ___lwdiv@quotient 0005                   ?_sprintf 000D      __end_of_inicializeLCD 0F20  
           ___wmul@product 0005                   _LATCbits 000F8B                ??_DelayXLCD 0030  
            ?_DelayPORXLCD 0001                   i2u115_47 1024                   i2u116_47 103E  
          OpenXLCD@lcdtype 0036             ??_Delay10KTCYx 0030    escreveLCD@primeiraLinha 0006  
               ?_configPic 0001        __end_of_interrupcao 0B0E          ___wmul@multiplier 0001  
                _putrsXLCD 0BC4           Delay10KTCYx@unit 0031     escreveLCD@segundaLinha 0008  
              _INTCON2bits 000FF1                _INTCON3bits 000FF0                  copy_data0 0EAE  
                 _BusyXLCD 102E           ??i2_DelayPORXLCD 0001               ??_escreveLCD 000A  
           ??_DelayPORXLCD 0030                   _OpenXLCD 0B0E                   __Hrparam 0000  
                 __Lrparam 0000           __size_of___lwdiv 005C           __size_of___lwmod 004C  
          i2_DelayFor18TCY 0F6E                 sprintf@val 001C                 ?_putrsXLCD 0004  
       __end_of_escreveLCD 0EF4           __size_of_isdigit 0022            ___lwdiv@divisor 0003  
          ___lwdiv@counter 0007                   __ptext10 0FB6                   __ptext20 0E0E  
                 __ptext12 0C80                   __ptext21 101E                   __ptext13 0CD8  
                 __ptext22 0BC4                   __ptext14 0632                   __ptext23 103C  
                 __ptext15 0F94                   __ptext24 0E4E                   __ptext16 0F20  
                 __ptext25 0F6E                   __ptext17 0D82                   __ptext18 0C24  
                 __ptext19 0EC4       __end_of_WriteCmdXLCD 0E0E           __size_of_sprintf 02D0  
                 _cronoReg 003D              __size_of_main 0014                   _pressRB0 0041  
                 _pressRB1 0043                _interrupcao 0008                ??_configPic 0030  
               _INTCONbits 000FF2           _cronoProgressivo 0CD8                   isdigit@c 0003  
     __end_of_Delay10KTCYx 0FE8                   intlevel2 0000                  sprintf@ap 0019  
                sprintf@sp 000D           ___lwmod@dividend 0008      __end_of_DelayFor18TCY 0F6E  
  __end_ofi2_DelayFor18TCY 0F94                   sprintf@c 0021                   sprintf@f 000F  
     __end_of_DelayPORXLCD 101E                ??_putrsXLCD 0006            ___lwmod@divisor 000A  
          ___lwmod@counter 000C                 i2_BusyXLCD 103C          i2WriteCmdXLCD@cmd 0003  
